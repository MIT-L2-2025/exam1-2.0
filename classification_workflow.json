{
  "name": "My workflow 8",
  "nodes": [
    {
      "parameters": {
        "fileSelector": "restaurant.json",
        "options": {
          "dataPropertyName": "json"
        }
      },
      "name": "Read JSON File",
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        140,
        0
      ],
      "id": "cc0e3883-f6c5-4401-a16e-486be329b45a"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "39cfd4be-4705-4e67-9b28-f2d47e1c5e90",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "operation": "fromJson",
        "binaryPropertyName": "json",
        "destinationKey": "restaurants",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        300,
        0
      ],
      "id": "d751d84c-57d4-4d34-bcdd-d4e5e796ae0d",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "// Tableaux de mots-clés\nconst positiveKeywords = [\n  'chinois',\n  'qing',\n  'dragon',\n  'panda',\n  'shi fu',\n  'tsang',\n  'rouge',\n  'hao',\n  'jade',\n  'lotus',\n  'dynasty',\n  'empire',\n  'chinese',\n  'huo',\n  'hong kong',\n  'canton',\n  'cantonaise',\n  'hua',\n  'fleur',\n  'orient',\n  'oriental',\n  'zen',\n  'jasmin',\n];\nconst negativeKeywords = [\n  'malagasy',\n  'gargotte', \n  'italy',\n  'indian',\n  'indien'\n];\n\nreturn items.map(item => {\n  const restaurants = item.json.restaurants || [];\n  return {\n    json: {\n      restaurants: restaurants.map(restaurant => {\n        const name = (restaurant.name || '').toLowerCase();\n        let score = 0;\n        let unscore = 0;\n\n        // Caractères chinois\n        if (/[\\u4e00-\\u9fff]/.test(name) || name.includes('chine') || name.includes('china')) {\n          score += 0.7;\n        }\n\n        // Vérification des mots-clés positifs\n        for (let keyword of positiveKeywords) {\n          if (name.includes(keyword)) {\n            score += 0.3;\n            break; // Sortir après le premier match pour éviter d'ajouter plusieurs fois\n          }\n        }\n\n        // Vérification des mots-clés négatifs\n        for (let keyword of negativeKeywords) {\n          if (name.includes(keyword)) {\n            unscore += 0.2;\n            break; // Sortir après le premier match pour éviter de pénaliser plusieurs fois\n          }\n        }\n\n        // Normaliser le score entre 0 et 1\n        score = Math.max(0, Math.min(1, score));\n\n        return {\n          ...restaurant,\n          name_chineseness_score: score,\n          name_chineseness_unscore: unscore\n        };\n      })\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        160,
        220
      ],
      "id": "91418348-126a-4b5c-99ee-794533a705cf",
      "name": "Name_ponderation"
    },
    {
      "parameters": {
        "jsCode": "// Fonction pour calculer la distance haversine (en km)\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Rayon de la Terre en km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n            Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n\n// Coordonnées approximatives des quartiers\nconst neighborhoods = [\n  { name: 'Behoririka', lat: -18.9000, lon: 47.5200, score: 0.6 },\n  { name: 'Analakely', lat: -18.9100, lon: 47.5250, score: 0.5 },\n  { name: 'Andrahavoangy', lat: -18.8900, lon: 47.5100, score: 0.3 },\n  { name: 'Ankorondrano', lat: -18.8700, lon: 47.5300, score: 0.5 },\n  { name: 'Ivato', lat: -18.8000, lon: 47.4800, score: 0.6 }\n];\n\n// Rayon de proximité en km\nconst proximityRadius = 2;\n\nreturn items.map(item => {\n  const restaurants = item.json.restaurants || [];\n  return {\n    json: {\n      restaurants: restaurants.map(restaurant => {\n        const lat = restaurant.latitude || 0;\n        const lon = restaurant.longitude || 0;\n        let score = 0.1; // Score par défaut\n\n        // Tester chaque quartier dans l'ordre\n        for (let neighborhood of neighborhoods) {\n          const distance = haversineDistance(lat, lon, neighborhood.lat, neighborhood.lon);\n          let no = neighborhood.name.toLowerCase();\n          let vic = restaurant.vicinity.toLowerCase();\n          if (distance <= proximityRadius || vic.includes(no)) {\n            score = neighborhood.score;\n            break; // Arrêter dès qu'un quartier proche est trouvé\n          }\n        }\n\n        return {\n          ...restaurant,\n          location_chineseness_score: score\n        };\n      })\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        220
      ],
      "id": "b29638e5-d186-46bc-b089-86001b5dbfb6",
      "name": "Location_ponderation"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const restaurants = item.json.restaurants || [];\n  return {\n    json: {\n      restaurants: restaurants.map(restaurant => {\n        const ratingsStr = restaurant.all_rating || '';\n        const ratings = ratingsStr.split('.').map(r => parseFloat(r.trim())).filter(r => !isNaN(r));\n        const avgRating = ratings.length ? ratings.reduce((sum, r) => sum + r, 0) / ratings.length : 0;\n\n        // Score basé sur la note moyenne (hypothèse : bons restaurants = plus authentiques)\n        let score = avgRating / 5; // Normalisé entre 0 et 1\n\n        return {\n          ...restaurant,\n          rating_chineseness_score: score\n        };\n      })\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        220
      ],
      "id": "8d9cb935-0829-4963-b755-29116d8d930a",
      "name": "Rating_ponderation"
    },
    {
      "parameters": {
        "jsCode": "const vraimentChinoisKeywords = [\n  'yum cha', 'dim sum', 'canard laqué', 'mapo tofu', 'xiaolongbao', 'authentique chinois','cuisine sichuanaise', 'cuisine cantonaise', 'wonton', 'raviolis chinois', '飲茶', 'authentique', 'authentic', 'tofu', 'noodle','noodles', 'chinois', 'chinese', 'cantonais', 'the', 'pao', 'tea', 'nouilles', 'cantonese', 'cantonese rice',\n];\nconst moyennementChinoisKeywords = [\n  'poulet général tao', 'chop suey', 'riz frit', 'nouilles chow mein', 'fusion asiatique', 'soup', 'chicken', 'poulet', 'asian', 'asiatique','fusion', 'mine-sao',\n  'sino-américain', 'egg roll'\n];\nconst pasChinoisKeywords = [\n  'pizza', 'burger', 'sushi', 'thaï', 'italien', 'français', 'mexicain', 'pas chinois', 'malagasy','Korea', 'Korean', 'american', 'americaine'\n];\n\nreturn items.map(item => {\n  const restaurants = item.json.restaurants || [];\n  return {\n    json: {\n      restaurants: restaurants.map(restaurant => {\n        const commentairesStr = restaurant.all_text || '';\n        const commentaires = commentairesStr.split(/[\\n.]+/).filter(c => c.trim());\n        let scoreVraiment = 0;\n        let scoreMoyennement = 0;\n        let scorePas = 0;\n\n        for (let commentaire of commentaires) {\n          const commentaireLower = commentaire.toLowerCase().trim();\n          for (let keyword of vraimentChinoisKeywords) {\n            if (commentaireLower.includes(keyword)) scoreVraiment += 0.3;\n          }\n          for (let keyword of moyennementChinoisKeywords) {\n            if (commentaireLower.includes(keyword)) scoreMoyennement += 0.2;\n          }\n          for (let keyword of pasChinoisKeywords) {\n            if (commentaireLower.includes(keyword)) scorePas += 0.2;\n          }\n        }\n\n        // Score final : privilégier \"vraiment chinois\", puis \"moyennement\", pénaliser \"pas chinois\"\n        let score = scoreVraiment + 0.5 * scoreMoyennement - scorePas;\n        score = Math.max(0, Math.min(1, score));\n\n        return {\n          ...restaurant,\n          text_chineseness_score: score\n        };\n      })\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        220
      ],
      "id": "ba5e3a55-fcaa-45cd-b016-a388df08b3e7",
      "name": "Description_ponderation"
    },
    {
      "parameters": {
        "jsCode": "const chineseNames = ['li', 'wang', 'zhang', 'chen', 'yang', 'zhao', 'ying', 'xu', 'sun'];\n\nreturn items.map(item => {\n  const restaurants = item.json.restaurants || [];\n  return {\n    json: {\n      restaurants: restaurants.map(restaurant => {\n        const authorsStr = restaurant.all_authors || '';\n        const authors = authorsStr.split(',').map(a => a.trim().toLowerCase());\n        let score = 0;\n\n        for (let author of authors) {\n          if (chineseNames.some(name => author.includes(name))) {\n            score += 0.3; // Bonus pour chaque nom potentiellement chinois\n          }else if(/[\\u4e00-\\u9fff]/.test(author)){\n            score += 0.7;\n          }\n        }\n\n        score = Math.max(0, Math.min(1, score));\n\n        return {\n          ...restaurant,\n          authors_chineseness_score: score\n        };\n      })\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        220
      ],
      "id": "0f8e5b64-d790-4527-9da9-a6714d33e3d2",
      "name": "Autor_ponderation"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "classification.html",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1380,
        220
      ],
      "id": "4b4d9094-fcd0-4455-b9f5-b81b839b5cff",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "jsCode": "const weights = {\n  name: 0.4,\n  text: 0.4,\n  authors: 0.3,\n  location: 0.2,\n  rating: 0.05\n};\n\n// Expected score distributions for each class\nconst expectedScores = {\n  'Vraiment chinois': {\n    name: 0.8,\n    location: 0.6,\n    text: 0.7,\n    authors: 0.7,\n    rating: 0.7\n  },\n  'Moyennement chinois': {\n    name: 0.5,\n    location: 0.4,\n    text: 0.5,\n    authors: 0.5,\n    rating: 0.5\n  },\n  'Pas chinois': {\n    name: 0.2,\n    location: 0.2,\n    text: 0.2,\n    authors: 0.2,\n    rating: 0.4\n  }\n};\n\n// Function to calculate Chi-squared statistic\nfunction calculateChiSquared(observed, expected) {\n  let chiSquared = 0;\n  const parameters = ['name', 'location', 'text', 'authors', 'rating'];\n  for (let param of parameters) {\n    const obs = observed[param] || 0;\n    const exp = expected[param] || 0.01; // Avoid division by zero\n    chiSquared += ((obs - exp) ** 2) / exp;\n  }\n  return chiSquared;\n}\n\nreturn items.map(item => {\n  const restaurants = item.json.restaurants || [];\n  return {\n    json: {\n      restaurants: restaurants.map(restaurant => {\n        // Retrieve scores (0 if absent)\n        const nameScore = restaurant.name_chineseness_score || 0;\n        const textScore = restaurant.text_chineseness_score || 0;\n        const authorsScore = restaurant.authors_chineseness_score || 0;\n        const locationScore = restaurant.location_chineseness_score || 0;\n        const ratingScore = restaurant.rating_chineseness_score || 0;\n\n        // Check discriminative rule\n        const isTextUnavailable = !restaurant.all_text || restaurant.all_text.trim() === '' || textScore === 0;\n        const isAuthorsUnavailable = !restaurant.all_authors || restaurant.all_authors.trim() === '' || authorsScore === 0;\n        const isHighNameScore = nameScore >= 0.7;\n        const isHighLocationScore = locationScore >= 0.7;\n\n        let classification;\n        let globalScore;\n\n        if (isHighNameScore && isHighLocationScore && isTextUnavailable && isAuthorsUnavailable) {\n          // Discriminative rule: force \"Vraiment chinois\"\n          classification = 'Vraiment chinois';\n          globalScore = 1.0;\n        } else {\n          // Calculate Chi-squared for each class\n          const observed = {\n            name: nameScore,\n            location: locationScore,\n            text: textScore,\n            authors: authorsScore,\n            rating: ratingScore\n          };\n          const chiSquaredResults = {};\n          for (let className in expectedScores) {\n            chiSquaredResults[className] = calculateChiSquared(observed, expectedScores[className]);\n          }\n\n          // Choose class with lowest Chi-squared\n          const bestClass = Object.keys(chiSquaredResults).reduce((a, b) =>\n            chiSquaredResults[a] < chiSquaredResults[b] ? a : b\n          );\n          classification = bestClass;\n\n          // Calculate weighted score for consistency (optional)\n          globalScore = (\n            nameScore * weights.name +\n            textScore * weights.text +\n            authorsScore * weights.authors +\n            locationScore * weights.location +\n            ratingScore * weights.rating\n          );\n          if(globalScore < 0.3 && classification == 'Moyennement chinois'){\n            classification = 'Pas chinois';\n          }\n        }\n\n        return {\n          ...restaurant,\n          global_chineseness_score: globalScore,\n          classification: classification\n        };\n      })\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1020,
        220
      ],
      "id": "af3e3353-edb5-42d5-9df5-d23031e17640",
      "name": "Global_classification"
    },
    {
      "parameters": {
        "jsCode": "// Générer le contenu du tableau HTML\nconst restaurants = items[0].json.restaurants || [];\nconst tableRows = restaurants.map((r, i) => `\n  <tr class=\"border-b hover:bg-gray-100 cursor-pointer\" onclick=\"openModal(${i})\">\n    <td class=\"py-2 px-4\">${r.name || 'N/A'}</td>\n    <td class=\"py-2 px-4\">${r.classification || 'Indéterminé'}</td>\n    <td class=\"py-2 px-4\">${((r.global_chineseness_score || 0) * 100).toFixed(2)}%</td>\n    <td class=\"py-2 px-4\">${(r.name_chineseness_score || 0).toFixed(2)}</td>\n    <td class=\"py-2 px-4\">${(r.location_chineseness_score || 0).toFixed(2)}</td>\n    <td class=\"py-2 px-4\">${(r.text_chineseness_score || 0).toFixed(2)}</td>\n    <td class=\"py-2 px-4\">${(r.authors_chineseness_score || 0).toFixed(2)}</td>\n    <td class=\"py-2 px-4\">${(r.rating_chineseness_score || 0).toFixed(2)}</td>\n  </tr>\n`).join('');\n\n// Compter les classifications pour le diagramme\nconst classificationCounts = restaurants.reduce((acc, r) => {\n  const key = r.classification || 'Indéterminé';\n  acc[key] = (acc[key] || 0) + 1;\n  return acc;\n}, { 'Vraiment chinois': 0, 'Moyennement chinois': 0, 'Pas chinois': 0, 'Indéterminé': 0 });\n\n// Données des restaurants pour le client\nconst restaurantsJson = JSON.stringify(\n  restaurants.map(r => ({\n    name: r.name || 'N/A',\n    classification: r.classification || 'Indéterminé',\n    latitude: r.latitude || 0,\n    longitude: r.longitude || 0,\n    vicinity: r.vicinity || ''\n  }))\n);\n\n// Modèle HTML\nconst htmlContent = `\n  <!DOCTYPE html>\n  <html lang=\"fr\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Classification des Restaurants Chinois</title>\n    <script src=\"https://cdn.tailwindcss.com\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyD26SBDx0y_zVHM30FGrC0BiQm6RrJwpmM&libraries=places\"></script>\n  </head>\n  <body class=\"bg-gray-100 font-sans\">\n    <div class=\"container mx-auto p-4\">\n      <h1 class=\"text-3xl font-bold text-center mb-6\">Classification des Restaurants Chinois</h1>\n\n      <!-- Barre de recherche -->\n      <div class=\"mb-6\">\n        <input type=\"text\" id=\"searchInput\" placeholder=\"Rechercher un restaurant...\" class=\"w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600\"/>\n        <ul id=\"searchResults\" class=\"mt-2 bg-white border rounded-lg shadow-lg hidden\"></ul>\n      </div>\n\n      <!-- Modale -->\n      <div id=\"modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50 transition-opacity duration-300\">\n        <div class=\"bg-white p-6 rounded-xl shadow-2xl max-w-lg w-full transform transition-transform duration-300 scale-95 modal-open:scale-100\">\n          <h3 id=\"modalTitle\" class=\"text-2xl font-bold mb-4 text-gray-800\"></h3>\n          <p class=\"mb-2\"><strong class=\"text-gray-700\">Authenticité :</strong> <span id=\"modalAuthenticity\" class=\"text-gray-600\"></span></p>\n          <p class=\"mb-2\"><strong class=\"text-gray-700\">Adresse :</strong> <span id=\"modalAddress\" class=\"text-gray-600\"></span></p>\n          <div id=\"map\" class=\"w-full h-64 mb-4 rounded-lg overflow-hidden\"></div>\n          <div class=\"mb-4\">\n            <label for=\"startAddress\" class=\"block text-gray-700 mb-1\">Adresse de départ :</label>\n            <input type=\"text\" id=\"startAddress\" placeholder=\"Entrez votre adresse\" class=\"w-full p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600\"/>\n            <button id=\"showRoute\" class=\"mt-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\">Afficher l'itinéraire</button>\n          </div>\n          <p class=\"mb-4\"><strong class=\"text-gray-700\">Google Maps :</strong> <a id=\"modalMapLink\" href=\"#\" target=\"_blank\" class=\"text-blue-600 underline\">Voir sur Google Maps</a></p>\n          <button id=\"closeModal\" class=\"w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700\">Fermer</button>\n        </div>\n      </div>\n\n      <!-- Tableau -->\n      <div class=\"overflow-x-auto\">\n        <table class=\"min-w-full bg-white shadow-md rounded-lg\">\n          <thead>\n            <tr class=\"bg-blue-600 text-white\">\n              <th class=\"py-3 px-4 text-left\">Nom</th>\n              <th class=\"py-3 px-4 text-left\">Classification</th>\n              <th class=\"py-3 px-4 text-left\">Score Global</th>\n              <th class=\"py-3 px-4 text-left\">Score Nom</th>\n              <th class=\"py-3 px-4 text-left\">Score Emplacement</th>\n              <th class=\"py-3 px-4 text-left\">Score Commentaires</th>\n              <th class=\"py-3 px-4 text-left\">Score Auteurs</th>\n              <th class=\"py-3 px-4 text-left\">Score Notes</th>\n            </tr>\n          </thead>\n          <tbody>${tableRows}</tbody>\n        </table>\n      </div>\n\n      <!-- Diagramme -->\n      <div class=\"mt-8\">\n        <h2 class=\"text-2xl font-semibold text-center mb-4\">Répartition des Classifications</h2>\n        <canvas id=\"classificationChart\" width=\"400\" height=\"200\"></canvas>\n        <script>\n          // Diagramme\n          new Chart(document.getElementById('classificationChart').getContext('2d'), {\n            type: 'bar',\n            data: {\n              labels: ['Vraiment chinois', 'Moyennement chinois', 'Pas chinois', 'Indéterminé'],\n              datasets: [{\n                label: 'Nombre de restaurants',\n                data: [${classificationCounts['Vraiment chinois']}, ${classificationCounts['Moyennement chinois']}, ${classificationCounts['Pas chinois']}, ${classificationCounts['Indéterminé']}],\n                backgroundColor: ['rgba(34, 197, 94, 0.6)', 'rgba(59, 130, 246, 0.6)', 'rgba(239, 68, 68, 0.6)', 'rgba(156, 163, 175, 0.6)'],\n                borderColor: ['rgba(34, 197, 94, 1)', 'rgba(59, 130, 246, 1)', 'rgba(239, 68, 68, 1)', 'rgba(156, 163, 175, 1)'],\n                borderWidth: 1\n              }]\n            },\n            options: { scales: { y: { beginAtZero: true, title: { display: true, text: 'Nombre de restaurants' } }, x: { title: { display: true, text: 'Classification' } } }, plugins: { legend: { display: false } } }\n          });\n\n          // Gestion de la recherche et modale\n          const data = ${restaurantsJson};\n          const modal = document.getElementById('modal');\n          const modalTitle = document.getElementById('modalTitle');\n          const modalAuthenticity = document.getElementById('modalAuthenticity');\n          const modalAddress = document.getElementById('modalAddress');\n          const modalMapLink = document.getElementById('modalMapLink');\n          const mapDiv = document.getElementById('map');\n          const startAddress = document.getElementById('startAddress');\n          let map, marker, directionsService, directionsRenderer;\n\n          function initMap(lat, lng) {\n            map = new google.maps.Map(mapDiv, { center: { lat, lng }, zoom: 15, mapTypeId: 'roadmap' });\n            marker = new google.maps.Marker({ position: { lat, lng }, map, title: modalTitle.textContent });\n            directionsService = new google.maps.DirectionsService();\n            directionsRenderer = new google.maps.DirectionsRenderer({ map });\n          }\n\n          function openModal(index) {\n            const r = data[index];\n            modalTitle.textContent = r.name;\n            modalAuthenticity.textContent = r.classification;\n            modalAddress.textContent = r.vicinity && r.vicinity.trim() ? r.vicinity : (r.latitude && r.longitude ? \\`Lat: \\${r.latitude}, Lon: \\${r.longitude}\\` : 'Adresse non disponible');\n            modalMapLink.href = r.latitude && r.longitude ? \\`https://www.google.com/maps?q=\\${r.latitude},\\${r.longitude}\\` : '#';\n            modal.classList.remove('hidden');\n            modal.classList.add('modal-open');\n            mapDiv.innerHTML = '';\n            startAddress.value = '';\n            if (r.latitude && r.longitude && !isNaN(r.latitude) && !isNaN(r.longitude)) {\n              initMap(r.latitude, r.longitude);\n            } else {\n              mapDiv.innerHTML = '<p class=\"text-gray-500\">Carte non disponible</p>';\n            }\n          }\n\n          document.getElementById('searchInput').addEventListener('input', () => {\n            const query = document.getElementById('searchInput').value.trim().toLowerCase();\n            const results = document.getElementById('searchResults');\n            results.innerHTML = '';\n            results.classList.add('hidden');\n            if (query) {\n              const filtered = data.filter((r, i) => r.name.toLowerCase().includes(query));\n              if (filtered.length) {\n                results.classList.remove('hidden');\n                filtered.forEach((r, i) => {\n                  const li = document.createElement('li');\n                  li.className = 'p-2 hover:bg-gray-100 cursor-pointer';\n                  li.textContent = r.name;\n                  li.onclick = () => { openModal(data.indexOf(r)); results.classList.add('hidden'); document.getElementById('searchInput').value = ''; };\n                  results.appendChild(li);\n                });\n              }\n            }\n          });\n\n          document.getElementById('showRoute').addEventListener('click', () => {\n            const start = startAddress.value.trim();\n            if (!start) return alert('Veuillez entrer une adresse de départ.');\n            if (!map || !directionsService || !directionsRenderer) return alert('Carte non initialisée.');\n            const r = data.find(r => r.name === modalTitle.textContent);\n            if (!r || !r.latitude || !r.longitude) return alert('Coordonnées non disponibles.');\n            directionsRenderer.setMap(null);\n            directionsRenderer = new google.maps.DirectionsRenderer({ map });\n            directionsService.route(\n              { origin: start, destination: { lat: r.latitude, lng: r.longitude }, travelMode: google.maps.TravelMode.DRIVING },\n              (result, status) => {\n                if (status === google.maps.DirectionsStatus.OK) directionsRenderer.setDirections(result);\n                else alert('Impossible de calculer l\\\\'itinéraire : ' + status);\n              }\n            );\n          });\n\n          document.getElementById('closeModal').onclick = () => {\n            modal.classList.add('hidden');\n            modal.classList.remove('modal-open');\n            startAddress.value = '';\n            mapDiv.innerHTML = '';\n          };\n\n          modal.onclick = (e) => {\n            if (e.target === modal) {\n              modal.classList.add('hidden');\n              modal.classList.remove('modal-open');\n              startAddress.value = '';\n              mapDiv.innerHTML = '';\n            }\n          };\n        </script>\n      </div>\n    </div>\n  </body>\n  </html>\n`;\n\n// Convertir le HTML en Buffer\nconst htmlBuffer = Buffer.from(htmlContent, 'utf-8');\n\n// Retourner les données binaires\nreturn [{\n  binary: {\n    data: {\n      data: htmlBuffer.toString('base64'),\n      mimeType: 'text/html',\n      fileName: 'restaurants.html'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        220
      ],
      "id": "2236f24e-7216-46ce-9fad-9ac8ea516f06",
      "name": "Conversion en html"
    }
  ],
  "pinData": {},
  "connections": {
    "Read JSON File": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Read JSON File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Name_ponderation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Name_ponderation": {
      "main": [
        [
          {
            "node": "Location_ponderation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Location_ponderation": {
      "main": [
        [
          {
            "node": "Rating_ponderation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rating_ponderation": {
      "main": [
        [
          {
            "node": "Description_ponderation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Description_ponderation": {
      "main": [
        [
          {
            "node": "Autor_ponderation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Autor_ponderation": {
      "main": [
        [
          {
            "node": "Global_classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Global_classification": {
      "main": [
        [
          {
            "node": "Conversion en html",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversion en html": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1bd054ab-d2b2-410c-a952-7b22d6f537d6",
  "meta": {
    "instanceId": "c49c0f976de77a9ed888a5ba0d2d58e9fd42d06b0d1226a3b2a7a9e238e05795"
  },
  "id": "JONNsUFjlaRfGYm3",
  "tags": []
}