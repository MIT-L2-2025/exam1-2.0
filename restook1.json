{
  "name": "restook1",
  "nodes": [
    {
      "parameters": {
        "url": "https://www.findglocal.com/MG/Antananarivo/153643-7/genre/174483852595760/Chinese+Restaurant",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        -140
      ],
      "id": "6f819f98-4540-4c37-99bd-3f5022212a56",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "linkTorestaurant",
              "cssSelector": "div.inneritembox a",
              "returnValue": "attribute",
              "attribute": "href",
              "returnArray": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        440,
        -140
      ],
      "id": "be78e852-2cbf-45bf-b290-55647755def0",
      "name": "HTML1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        880,
        -140
      ],
      "id": "03922e77-d05c-48e5-8d35-e0ac69095f95",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        1680,
        -120
      ],
      "id": "f1489b36-fc6d-4546-bab3-86bf3fc38a9e"
    },
    {
      "parameters": {
        "jsCode": "const baseUrl = 'https://www.findglocal.com';\n\n// Accède à la liste d'URLs\nconst links = items[0].json.linkTorestaurant;\n\n// Supprime les doublons\nconst uniqueLinks = [...new Set(links)];\n\nreturn uniqueLinks.map(link => {\n  return {\n    json: {\n      fullUrl: baseUrl + link\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        -140
      ],
      "id": "e48b5476-bc06-45f1-bef2-60883e0f0368",
      "name": "Code2"
    },
    {
      "parameters": {
        "url": "={{$json[\"fullUrl\"]}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1080,
        -120
      ],
      "id": "9e16e21e-51c7-424f-b836-d4ffab5970db",
      "name": "HTTP Request3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        80,
        -320
      ],
      "id": "582d9bc1-84ad-4c5f-98b5-1d0a1b35b849",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "hours",
              "cssSelector": "table.hours tr",
              "returnArray": true
            },
            {
              "key": "name",
              "cssSelector": "div.headerrow h1"
            },
            {
              "key": "image",
              "cssSelector": "div.col-xs-12 img",
              "returnValue": "attribute"
            },
            {
              "key": "jsonLd",
              "cssSelector": "script[type='application/ld+json']"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        1280,
        -120
      ],
      "id": "8dcfee18-bfa4-4bf8-a7d7-d5ae47f447f1",
      "name": "HTML"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const nom = item.json.name || 'Inconnu';\n  const heuresBrutes = item.json.hours || [];\n\n  let latitude = null;\n  let longitude = null;\n\n  // Extraire les coordonnées depuis le JSON-LD\n  try {\n    const jsonLd = item.json.jsonLd ? JSON.parse(item.json.jsonLd) : null;\n    if (jsonLd && jsonLd['@type'] === 'Place' && jsonLd.geo) {\n      latitude = jsonLd.geo.latitude || null;\n      longitude = jsonLd.geo.longitude || null;\n    } else if (jsonLd && Array.isArray(jsonLd['@graph'])) {\n      const place = jsonLd['@graph'].find(node => node['@type'] === 'Place' || node['@type'] === 'Restaurant');\n      if (place && place.geo) {\n        latitude = place.geo.latitude || null;\n        longitude = place.geo.longitude || null;\n      }\n    }\n  } catch (e) {\n    console.error('Erreur lors du parsing JSON-LD:', e);\n  }\n\n  const hours = {};\n  heuresBrutes.forEach(ligne => {\n    const [jour, ...heures] = ligne.trim().split(/\\s+/);\n    if (jour && heures.length > 0) {\n      hours[jour] = heures.join(' ');\n    }\n  });\n\n  return {\n    json: {\n      nom,\n      hours,\n      image: item.json.image || '',\n      latitude,\n      longitude\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        540,
        -320
      ],
      "id": "924da4bb-6792-4127-9d3a-0b2126e009af",
      "name": "Code"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        720,
        -420
      ],
      "id": "0b4500ce-ef65-4e08-93ef-7a7ef817c26a",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// list1 = liste simple avec des noms\nconst list1 = [\n  { name: \"Le Grand Orient\" },\n  { name: \"Grand Resto de Chine\" },\n  { name: \"La Fleur De Sel\" },\n  { name: \"La Jonquille\" },\n  { name: \"l'Orient Asian Fusion Restaurant\" },\n  { name: \"凤城 Soleil\" },\n  { name: \"O Loft Chinois\" },\n  { name: \"Restaurant Shanghai\" },\n  { name: \"Hirondelle \\\"燕子\\\" Chinese FOOD\" },\n  { name: \"Zen Garden\" },\n  { name: \"Restaurant Fong Mei\" },\n  { name: \"佬湘好\" },\n  { name: \"Restaurant L'EURASIE - Ankorondrano\" },\n  { name: \"Restaurant La Belle Ville\" },\n  { name: \"Dragon Royal Restaurant IVATO\" },\n  { name: \"吕府私房菜（KTV）\" },\n  { name: \"逸香酒樓 Yixiang Restaurant\" },\n  { name: \"Hotel Seoul & Restaurant\" },\n  { name: \"Le Petit Bouchon\" },\n  { name: \"DRAGON ROYAL Restaurant\" }\n];\n\n// list2 = la liste entrée dans le Node (depuis la sortie précédente)\nconst list2 = items.map(item => item.json);\n\n// Fonction de normalisation pour détecter les doublons\nfunction normalize(name) {\n  return name\n    .toLowerCase()\n    .normalize('NFD') // enlève accents\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[^a-z0-9]/g, ''); // retire espaces et ponctuation\n}\n\n// Fonction pour calculer le pourcentage de probabilité qu'un restaurant soit chinois\nfunction calculateChineseLikelihood(name) {\n  if (!name) return 0;\n  const lowerName = name.toLowerCase();\n  const hasChineseChars = /[\\u4e00-\\u9fff]/.test(name);\n  const chineseKeywords = ['chine', 'chinois', 'chinese', 'dragon', 'shanghai', 'orient', 'zen', 'fong', 'mei', 'yixiang', 'soleil', 'royal', 'asian', 'hirondelle', 'sichuan', 'cantonese', 'dim sum', 'mandarin', 'peking', 'wok'];\n\n  if (hasChineseChars) return 95; // Caractères chinois dans nom = forte probabilité\n  if (chineseKeywords.some(keyword => lowerName.includes(keyword))) return 80; // Mots-clés chinois\n  if (lowerName.includes('restaurant')) return 50; // Nom générique avec 'restaurant'\n  return 30; // Autres cas, faible probabilité\n}\n\n// Créer un dictionnaire pour stocker les restaurants sans doublon\nconst restaurantsMap = new Map();\n\n// Ajouter d'abord ceux de list2 (ils ont des horaires, images, et coordonnées)\nfor (const entry of list2) {\n  const norm = normalize(entry.nom || \"\");\n  restaurantsMap.set(norm, {\n    nom: entry.nom,\n    hours: entry.hours || {},\n    image: entry.image || '',\n    latitude: entry.latitude || null,\n    longitude: entry.longitude || null,\n    chineseLikelihood: calculateChineseLikelihood(entry.nom)\n  });\n}\n\n// Ajouter ceux de list1 uniquement si pas encore présents\nfor (const entry of list1) {\n  const norm = normalize(entry.name || \"\");\n  if (!restaurantsMap.has(norm)) {\n    restaurantsMap.set(norm, {\n      nom: entry.name,\n      hours: {},\n      image: '',\n      latitude: null,\n      longitude: null,\n      chineseLikelihood: calculateChineseLikelihood(entry.name)\n    });\n  }\n}\n\n// Transformer en tableau n8n\nconst final = Array.from(restaurantsMap.values()).map(r => ({ json: r }));\n\nreturn final;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        -420
      ],
      "id": "b2ce54d7-2cac-4ba0-b103-4a12453671bc",
      "name": "Code3"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1900,
        -120
      ],
      "id": "3b5a07de-3ab9-436a-8c5f-cf78db1da958",
      "name": "Wait",
      "webhookId": "3fd242c4-d45f-475f-af8a-bf6e4a1028d4"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const nom = item.json.name || 'Inconnu';\n  const heuresBrutes = item.json.hours || [];\n\n  const hours = {};\n  heuresBrutes.forEach(ligne => {\n    const [jour, ...heures] = ligne.trim().split(/\\s+/);\n    if (jour && heures.length > 0) {\n      hours[jour] = heures.join(' ');\n    }\n  });\n\n  return {\n    json: {\n      nom,\n      hours\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        -600
      ],
      "id": "999b15e0-b3a8-4b42-b5da-e6990b26dc21",
      "name": "Code6"
    },
    {
      "parameters": {
        "jsCode": "const restaurants = items;\n\nfunction isValidUrl(url) {\n  if (!url) return false;\n  const pattern = /^(https?:\\/\\/)/;\n  return pattern.test(url);\n}\n\nlet html = `\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Restaurants chinois à Antananarivo</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Noto+Serif+SC&display=swap\" rel=\"stylesheet\">\n  <style>\n    body {\n      font-family: 'Noto Serif SC', serif;\n      background-image: url('https://www.transparenttextures.com/patterns/asanoha.png');\n      background-color: #fff8f0;\n      margin: 0;\n      padding: 0;\n    }\n    h1 {\n      text-align: center;\n      margin-top: 30px;\n      color: #a30000;\n      font-size: 36px;\n      text-shadow: 1px 1px #ffd700;\n    }\n    .container {\n      width: 95%;\n      margin: 30px auto;\n      padding: 20px;\n      background-color: rgba(255, 255, 255, 0.9);\n      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n      border-radius: 12px;\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));\n      gap: 25px;\n    }\n\n    .restaurant {\n      border: 2px solid #d4af37;\n      padding: 20px;\n      background-color: #fffdf6;\n      border-radius: 10px;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      text-align: center;\n      transition: transform 0.3s ease, box-shadow 0.3s ease;\n    }\n\n    .restaurant:hover {\n      transform: translateY(-5px);\n      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);\n    }\n\n    .restaurant img {\n      width: 130px;\n      height: 130px;\n      object-fit: cover;\n      border-radius: 50%;\n      border: 3px solid #a30000;\n    }\n\n    .details {\n      margin-top: 15px;\n      width: 100%;\n    }\n\n    .details h3 {\n      margin: 0 0 10px;\n      font-size: 22px;\n      color: #a30000;\n    }\n\n    .details p {\n      margin: 4px 0;\n      font-size: 16px;\n      color: #333;\n    }\n\n    .details a {\n      text-decoration: none;\n      color: #a30000;\n      font-weight: bold;\n    }\n\n    .details button {\n      background-color: #d00000;\n      color: #fff;\n      border: none;\n      padding: 10px 18px;\n      border-radius: 6px;\n      cursor: pointer;\n      font-size: 15px;\n      margin-top: 12px;\n      transition: background-color 0.3s;\n    }\n\n    .details button:hover {\n      background-color: #a30000;\n    }\n  </style>\n</head>\n<body>\n  <h1>Restaurants chinois de Tana</h1>\n  <div class=\"container\">\n`;\n\nrestaurants.forEach(resto => {\n  const name = resto.json.nom || 'Nom inconnu';\n  const nameLower = name.toLowerCase();\n\n  // Filtrer les noms exclus\n  if (\n    name === 'Tailleur Gilbert Rakotomanana' ||\n    name === 'Avia Mona' ||\n    nameLower.includes('hanova')\n  ) {\n    return; // Ignorer ce restaurant\n  }\n\n  const hours = resto.json.hours || {};\n  let hoursHtml = '';\n  for (const [day, time] of Object.entries(hours)) {\n    hoursHtml += `<p><strong>${day}:</strong> ${time}</p>`;\n  }\n  if (!hoursHtml) {\n    hoursHtml = '<p><strong>Horaires:</strong> Non disponibles</p>';\n  }\n  const chineseLikelihood = resto.json.chineseLikelihood || 0;\n  const imageUrl = resto.json.image && isValidUrl(resto.json.image) ? resto.json.image : 'https://via.placeholder.com/130';\n  const latitude = resto.json.latitude || null;\n  const longitude = resto.json.longitude || null;\n  const coordinates = latitude && longitude ? `Lat: ${latitude}, Lng: ${longitude}` : 'Non disponibles';\n  const mapUrl = latitude && longitude ? `https://www.google.com/maps?q=${latitude},${longitude}` : '#';\n\n  html += `\n    <div class=\"restaurant\">\n      <img src=\"${imageUrl}\" alt=\"${name}\">\n      <div class=\"details\">\n        <h3>${name}</h3>\n        ${hoursHtml}\n        <p><strong>Coordonnées:</strong> ${coordinates}</p>\n        <p><strong>Probabilité chinois:</strong> ${chineseLikelihood}%</p>\n        <a href=\"${mapUrl}\" target=\"_blank\">\n          <button ${latitude && longitude ? '' : 'disabled'}>Voir sur Google Maps</button>\n        </a>\n      </div>\n    </div>\n  `;\n});\n\nhtml += `\n  </div>\n</body>\n</html>\n`;\n\nconst buffer = Buffer.from(html, 'utf8');\nconst base64data = buffer.toString('base64');\n\nreturn [\n  {\n    binary: {\n      data: {\n        data: base64data,\n        mimeType: 'text/html',\n        fileName: 'restaurants_chinois_de_Tana.html'\n      }\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        -420
      ],
      "id": "9c1a6adc-4f0f-460b-8551-260b50c6401c",
      "name": "Code7"
    },
    {
      "parameters": {
        "jsCode": "const data = items[0].json;\n\n// 1. Parser le JSON-LD\nlet jsonLd = {};\ntry {\n  jsonLd = JSON.parse(data.jsonLd);\n} catch (e) {\n  return [{ json: { error: \"Impossible de parser jsonLd\", details: e.message } }];\n}\n\n// 2. Récupérer l'image depuis le champ jsonLd\nlet imageUrl = null;\n\ntry {\n  // Essaie d'aller chercher l'image dans itemListElement[3].item.image\n  const list = jsonLd.itemListElement;\n  if (Array.isArray(list) && list.length >= 4) {\n    imageUrl = list[3].item.image || null;\n  }\n} catch (e) {\n  // fallback au cas où la structure change\n  imageUrl = jsonLd.image || null;\n}\n\n// 3. Construire le résultat final\nreturn [\n  {\n    json: {\n      name: data.name || null,\n      hours: data.hours || [],\n      image: imageUrl,\n      jsonLd: data.jsonLd\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1480,
        -120
      ],
      "id": "a34777e1-cf9b-451b-8f97-dcf5567da418",
      "name": "Code1"
    }
  ],
  "pinData": {},
  "connections": {
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "HTML1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML1": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "92705b42-982b-4b19-8b56-9cbd8c6b41c8",
  "meta": {
    "instanceId": "f1abdd8dcb2895a944507464a4075cdf763c8e2d1bbb7adeea64af54f3a05cd0"
  },
  "id": "Dml5mnv37M2fpJOB",
  "tags": []
}