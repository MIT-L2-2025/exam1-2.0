{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "c0b0e1c9-9672-4595-a261-48f83f7cc0da",
      "name": "When clicking ‚ÄòTest workflow‚Äô"
    },
    {
      "parameters": {
        "fileSelector": "resto.json",
        "options": {
          "fileExtension": ""
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        280,
        120
      ],
      "id": "a4caa18c-359e-4ed1-b0cf-6fbf4b09d02b",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "jsCode": "// V√©rifie le contenu de l'entr√©e\nconst file = $input.item.binary?.data;\n\nif (!file) \n{\n  throw new Error('Fichier binaire introuvable. Assurez-vous que le champ \"data\" existe.');\n}\n\n// D√©codage base64\nconst buffer = Buffer.from(file.data, 'base64');\nconst content = buffer.toString('utf8');\n\nlet parsed;\ntry \n{\n  parsed = JSON.parse(content);\n} \ncatch (e) \n{\n  throw new Error('Erreur de parsing JSON : ' + e.message);\n}\n\n// Retourne chaque restaurant comme un item s√©par√©\nreturn Array.isArray(parsed)\n  ? parsed.map(r => ({ json: r }))\n  : parsed.restaurants && Array.isArray(parsed.restaurants)\n    ? parsed.restaurants.map(r => ({ json: r }))\n    : [{ json: parsed }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        0
      ],
      "id": "6eea24e2-bd05-46b0-be2f-8e85d0036797",
      "name": "Decode fichier JSON"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const r = item.json;\n  const nom = r.nom?.toLowerCase() || '';\n  const spec = r.specialite?.toLowerCase() || '';\n\n  const aCaractereChinois = /[\\u4e00-\\u9fff]/.test(nom) ? 1 : 0;\n  const contientChinoisDansNom = nom.includes('chinois') ? 1 : 0;\n  const estAsiatique = spec.includes('chinese') || spec.includes('asian') ? 1 : 0;\n  const ratingOk = typeof r.rating === 'number' && r.rating >= 4 ? 1 : 0;\n  const avisSuffisants = typeof r.reviews === 'number' && r.reviews >= 5 ? 1 : 0;\n\n  const vrai = (\n    aCaractereChinois === 1 ||\n    contientChinoisDansNom === 1 ||\n    (ratingOk === 1 && avisSuffisants === 1)\n  ) ? 1 : 0;\n\n  return {\n    json: {\n      nom: r.nom || '',\n      contact: r.contact || '',\n      adresse: r.adresse || '',\n      latitude: r.latitude || 0,\n      longitude: r.longitude || 0,\n      specialite: r.specialite || '',\n      site: r.site || 'Aucun site',\n      photo: r.photo || '',\n      rating: typeof r.rating === 'number' ? r.rating : 0,\n      reviews: typeof r.reviews === 'number' ? r.reviews : 0,\n      vrai,\n      aCaractereChinois,\n      contientChinoisDansNom,\n      estAsiatique,\n      ratingOk,\n      avisSuffisants\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        120
      ],
      "id": "0ab71b62-fe3b-4ada-8e79-dc39296907c6",
      "name": "Etiquetage"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import pandas as pd\nfrom scipy.stats import chi2_contingency\n\ndata = [item['json'] for item in items]\ndf = pd.DataFrame(data)\n\ncolonnes_a_tester = ['aCaractereChinois', 'contientChinoisDansNom', 'estAsiatique', 'ratingOk', 'avisSuffisants']\ncolonnes_significatives = []\n\nfor col in colonnes_a_tester:\n    table = pd.crosstab(df[col], df['vrai'])\n    if table.shape == (2, 2):\n        chi2, p, dof, expected = chi2_contingency(table)\n        if p < 0.05:\n            colonnes_significatives.append(col)\n\n# Nombre total de colonnes significatives\nn = len(colonnes_significatives)\n\nif n > 0:\n    # Calcul du nombre de 1 par ligne sur ces colonnes\n    nb_ones = df[colonnes_significatives].sum(axis=1)\n    nb_zeros = n - nb_ones\n    \n    # Filtre : nb_ones > nb_zeros\n    filtre = nb_ones > nb_zeros\n    \n    vrais_restos = df[filtre]\n\n    resultat = vrais_restos[[\n        'nom', 'contact', 'adresse', 'latitude', 'longitude', 'specialite',\n        'rating', 'reviews', 'site', 'photo'\n    ]].to_dict(orient='records')\nelse:\n    # Pas de colonnes significatives : r√©sultat vide\n    resultat = []\n\nreturn resultat\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1060,
        0
      ],
      "id": "a1d2efee-169f-47b2-87dd-a1644619c6b3",
      "name": "Test de khi2"
    },
    {
      "parameters": {
        "jsCode": "const escapeHtml = (unsafe) => {\n  if (typeof unsafe !== 'string') return 'Non disponible';\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n};\n\n// R√©cup√©rer et valider les donn√©es d'entr√©e\nlet restaurants = [];\ntry {\n  restaurants = $input.all().map(item => item.json).filter(r => r && typeof r === 'object');\n  if (restaurants.length === 0) {\n    throw new Error('Aucune donn√©e de restaurant valide trouv√©e.');\n  }\n} catch (error) {\n  return [{\n    json: { error: 'Erreur lors de la r√©cup√©ration des donn√©es', message: error.message },\n  }];\n}\n\n// G√©n√©rer le contenu HTML\nlet htmlContent = `\n  <!DOCTYPE html>\n  <html lang=\"fr\">\n  <head>\n      <meta charset=\"UTF-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <title>Liste des Restaurants chinois d'Antananarivo</title>\n      <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n      <style>\n          body {\n              font-family: 'Segoe UI', Arial, sans-serif;\n              margin: 0;\n              padding: 20px;\n              background-color:  #fdfdfb;\n          }\n          .container {\n              max-width: 900px;\n              margin: auto;\n              padding: 20px;\n          }\n          h1 {\n              text-align: center;\n              color: #333;\n          }\n          .search-bar-container {\n              text-align: center;\n              margin-bottom: 20px;\n          }\n          input[type=\"search\"] {\n              width: 60%;\n              max-width: 400px;\n              padding: 10px 15px;\n              font-size: 1rem;\n              border: 1px solid #ccc;\n              border-radius: 25px;\n              outline: none;\n              transition: box-shadow 0.3s ease;\n          }\n          input[type=\"search\"]:focus {\n              box-shadow: 0 0 5px 2px #f08080; /* l√©ger halo rose */\n              border-color: #f08080;\n          }\n          .restaurant-list {\n              display: grid;\n              grid-template-columns: 1fr 1fr;\n              gap: 20px;\n          }\n          .restaurant {\n               background: linear-gradient(135deg, #fff6f9 0%, #ffeef2 100%); /* Rose-blanc cach√© */\n              border: 1px solid #e0e0e0;\n              padding: 20px;\n              margin-bottom: 20px;\n              border-radius: 8px;\n              transition: transform 0.2s, box-shadow 0.2s;\n          }\n          .restaurant:hover {\n              transform: translateY(-5px);\n              box-shadow: 0 6px 16px rgba(0,0,0,0.15);\n          }\n          .restaurant-info {\n              grid-column: 1;\n          }\n          img {\n              max-width: 100%;\n              height: auto;\n              border-radius: 5px;\n              margin-top: 10px;\n              display: block;\n          }\n          h2 {\n              margin-top: 0;\n              color: #2c3e50;\n          }\n          .map {\n              height: 200px;\n              width: 100%;\n              margin-top: 10px;\n              border-radius: 5px;\n          }\n          @media (max-width: 600px) {\n              .restaurant-list {\n                  grid-template-columns: 1fr;\n              }\n              input[type=\"search\"] {\n                  width: 90%;\n              }\n          }\n      </style>\n  </head>\n  <body>\n      <div class=\"container\">\n          <h1>Liste des Restaurants chinois d'Antananarivo</h1>\n          <div class=\"search-bar-container\">\n              <input type=\"search\" id=\"searchInput\" placeholder=\"Rechercher un restaurant...\" />\n          </div>\n          <div class=\"restaurant-list\" id=\"restaurantList\">\n`;\n\nrestaurants.forEach((restaurant, index) => {\n  const nom = escapeHtml(restaurant.nom || 'Nom inconnu');\n  const contact = escapeHtml(restaurant.contact || 'Non disponible');\n  const adresse = escapeHtml(restaurant.adresse || 'Non disponible');\n  const specialite = escapeHtml(restaurant.specialite || 'Non disponible');\n  const photo = restaurant.photo && restaurant.photo !== 'Pas de photo disponible'\n    ? escapeHtml(restaurant.photo)\n    : 'https://via.placeholder.com/400';\n  const latitude = parseFloat(restaurant.latitude) || null;\n  const longitude = parseFloat(restaurant.longitude) || null;\n\n  htmlContent += `\n    <div class=\"restaurant\" data-nom=\"${nom.toLowerCase()}\">\n        <div class=\"restaurant-info\">\n            <h2>${nom}</h2>\n            <p><strong>T√©l√©phone :</strong> ${contact}</p>\n            <p><strong>Adresse :</strong> ${adresse}</p>\n            <p><strong>Sp√©cialit√© :</strong> ${specialite}</p>\n            <p><strong>Coordonn√©es :</strong><br>\n            ${\n              latitude && longitude\n                ? `Latitude ${latitude}, Longitude ${longitude}<br>\n                   <a href=\"https://www.google.com/maps?q=&layer=c&cbll=${latitude},${longitude}\" target=\"_blank\">\n                    üåê Voir en vue immersive (Street View)\n                   </a>`\n                : 'Non disponible'\n            }\n            </p>\n            <img src=\"${photo}\" alt=\"Photo de ${nom}\" />\n            ${\n              latitude && longitude\n                ? `<div id=\"map-${index}\" class=\"map\"></div>`\n                : ''\n            }\n        </div>\n    </div>\n  `;\n});\n\nhtmlContent += `\n          </div>\n      </div>\n\n      <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n      <script>\n          // Recherche simple sur le nom du restaurant\n          document.getElementById('searchInput').addEventListener('input', function () {\n              const filter = this.value.toLowerCase();\n              const restaurants = document.querySelectorAll('.restaurant');\n              restaurants.forEach(r => {\n                  const nom = r.getAttribute('data-nom');\n                  if (nom.includes(filter)) {\n                      r.style.display = '';\n                  } else {\n                      r.style.display = 'none';\n                  }\n              });\n          });\n\n          document.addEventListener('DOMContentLoaded', () => {\n              ${restaurants.map((restaurant, index) => {\n                const latitude = parseFloat(restaurant.latitude) || null;\n                const longitude = parseFloat(restaurant.longitude) || null;\n                if (latitude && longitude) {\n                  return `\n                    var map = L.map('map-${index}').setView([${latitude}, ${longitude}], 13);\n                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                        attribution: '¬© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n                    }).addTo(map);\n                    L.marker([${latitude}, ${longitude}]).addTo(map)\n                        .bindPopup('${escapeHtml(restaurant.nom || 'Restaurant')}');\n                  `;\n                }\n                return '';\n              }).join('')}\n          });\n      </script>\n  </body>\n  </html>\n`;\n\n// Retourner le r√©sultat\nreturn [{\n  json: { fileName: 'restaurants.html' },\n  binary: {\n    data: {\n      data: Buffer.from(htmlContent).toString('base64'),\n      mimeType: 'text/html',\n      fileName: 'restaurants.html'\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        120
      ],
      "id": "ce7871ea-d2fc-43e4-a552-83fcc2d248da",
      "name": "G√©neration page HTML"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "restaurants.html",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1580,
        0
      ],
      "id": "9fb348b5-a61d-47af-8962-9a5bc23e1819",
      "name": "Read/Write Files from Disk1"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‚ÄòTest workflow‚Äô": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Decode fichier JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decode fichier JSON": {
      "main": [
        [
          {
            "node": "Etiquetage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Etiquetage": {
      "main": [
        [
          {
            "node": "Test de khi2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test de khi2": {
      "main": [
        [
          {
            "node": "G√©neration page HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "G√©neration page HTML": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d72fc4c7-e0a3-47a2-8295-123eeb5ed4b9",
  "meta": {
    "instanceId": "1f8c86df5e24abd227027064c83a983eeb0404696923bd7c6defe9e16b6c2883"
  },
  "id": "XCXSzWTJ532wXTTl",
  "tags": []
}