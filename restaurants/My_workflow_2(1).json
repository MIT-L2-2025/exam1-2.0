{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1320,
        -880
      ],
      "id": "0190b60b-e403-47fa-ab15-81c95d3c79af",
      "name": "When clicking ‚ÄòTest workflow‚Äô"
    },
    {
      "parameters": {
        "fileSelector": "/home/mit/mon-projet-n8n/file(2).json",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1140,
        -760
      ],
      "id": "20fbfe49-3d6b-49af-9c1a-979630d9a60a",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "jsCode": "const file = $input.item.binary?.data;\n\nif (!file) {\n  throw new Error('Fichier binaire introuvable. Assurez-vous que le champ \"data\" existe.');\n}\n\nconst buffer = Buffer.from(file.data, 'base64');\nconst content = buffer.toString('utf8');\n\nlet parsed;\ntry {\n  parsed = JSON.parse(content);\n} catch (e) {\n  throw new Error('Erreur de parsing JSON : ' + e.message);\n}\n\nreturn Array.isArray(parsed)\n  ? parsed.map(r => ({ json: r }))\n  : parsed.restaurants && Array.isArray(parsed.restaurants)\n    ? parsed.restaurants.map(r => ({ json: r }))\n    : [{ json: parsed }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -940,
        -660
      ],
      "id": "df5fb493-7aa3-462e-90c8-eaa6eb06eaf2",
      "name": "Code"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import base64\nimport html\n\ndef escape_html(text):\n    if not isinstance(text, str):\n        return \"Non disponible\"\n    return html.escape(text)\n\nrestaurants = [item[\"json\"] for item in items]\n\nif not restaurants:\n    return [{\"json\": {\"error\": \"Aucune donn√©e de restaurant valide.\"}}]\n\nhtml_content = \"\"\"\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Liste des Restaurants</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n    <style>\n        body {\n            font-family: 'Segoe UI', sans-serif;\n            background: #f2f2f2;\n            margin: 0;\n            padding: 20px;\n            animation: fadein 2s ease-out;\n        }\n        @keyframes fadein {\n            0% { opacity: 0; }\n            100% { opacity: 1; }\n        }\n        .container {\n            max-width: 1200px;\n            margin: auto;\n            background: white;\n            padding: 30px;\n            border-radius: 20px;\n            box-shadow: 0 5px 20px rgba(0,0,0,0.2);\n            animation: slideIn 1.5s ease-out;\n        }\n        @keyframes slideIn {\n            0% { transform: translateY(50px); opacity: 0; }\n            100% { transform: translateY(0); opacity: 1; }\n        }\n        .restaurant-grid {\n            display: grid;\n            grid-template-columns: repeat(2, 1fr);\n            gap: 30px;\n        }\n        .restaurant {\n            padding: 20px;\n            border-radius: 15px;\n            background: #fff;\n            box-shadow: 0 5px 25px rgba(0,0,0,0.1);\n            transition: transform 0.3s ease, box-shadow 0.3s ease;\n            opacity: 0;\n            transform: translateY(50px);\n            animation: fadeUp 1s ease-out forwards;\n        }\n        @keyframes fadeUp {\n            0% { opacity: 0; transform: translateY(50px); }\n            100% { opacity: 1; transform: translateY(0); }\n        }\n        .restaurant:hover {\n            transform: scale(1.05);\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n        }\n        h1 {\n            text-align: center;\n            color: #2c3e50;\n            font-size: 2.5em;\n        }\n        h2 {\n            margin: 0;\n            color: #34495e;\n            font-size: 1.8em;\n            font-weight: 600;\n        }\n        p {\n            font-size: 1.1em;\n            color: #555;\n        }\n        img {\n            width: 100%;\n            height: auto;\n            border-radius: 10px;\n            margin-top: 15px;\n            box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n            transition: transform 0.4s ease-in-out;\n        }\n        img:hover {\n            transform: scale(1.05);\n        }\n        .map {\n            height: 300px;\n            margin-top: 20px;\n            border-radius: 10px;\n            box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n        }\n        a {\n            color: #007bff;\n            text-decoration: none;\n            font-weight: bold;\n            transition: color 0.3s ease;\n        }\n        a:hover {\n            color: #0056b3;\n        }\n    </style>\n</head>\n<body>\n<div class=\"container\">\n    <h1>Liste des Restaurants</h1>\n    <div class=\"restaurant-grid\">\n\"\"\"\n\nmap_scripts = \"\"\n\nfor index, r in enumerate(restaurants):\n    nom = escape_html(r.get(\"nom\", \"Nom inconnu\"))\n    contact = escape_html(r.get(\"contact\", \"Non disponible\"))\n    adresse = escape_html(r.get(\"adresse\", \"Non disponible\"))\n    specialite = escape_html(r.get(\"specialite\", \"Non disponible\"))\n    photo = r.get(\"photo\", \"\")\n    if not photo or photo == \"Pas de photo disponible\":\n        photo = \"https://via.placeholder.com/400\"\n    else:\n        photo = escape_html(photo)\n\n    lat = r.get(\"latitude\")\n    lon = r.get(\"longitude\")\n    coords_html = \"Non disponible\"\n    map_div = \"\"\n\n    if lat and lon:\n        try:\n            lat = float(lat)\n            lon = float(lon)\n            coords_html = f\"\"\"Latitude {lat}, Longitude {lon}<br>\n            <a href=\"https://www.google.com/maps?q=&layer=c&cbll={lat},{lon}\" target=\"_blank\">\n              üåê Voir en vue immersive (Street View)\n            </a>\"\"\"\n            map_div = f'<div id=\"map-{index}\" class=\"map\"></div>'\n            map_scripts += f\"\"\"\n                var map{index} = L.map('map-{index}').setView([{lat}, {lon}], 13);\n                L.tileLayer('https://{{s}}.tile.openstreetmap.org/{{z}}/{{x}}/{{y}}.png', {{\n                    attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n                }}).addTo(map{index});\n                L.marker([{lat}, {lon}]).addTo(map{index})\n                    .bindPopup('{nom}');\n            \"\"\"\n        except:\n            pass\n\n    html_content += f\"\"\"\n    <div class=\"restaurant\">\n        <h2>{nom}</h2>\n        <p><strong>T√©l√©phone :</strong> {contact}</p>\n        <p><strong>Adresse :</strong> {adresse}</p>\n        <p><strong>Sp√©cialit√© :</strong> {specialite}</p>\n        <p><strong>Coordonn√©es :</strong><br>{coords_html}</p>\n        <img src=\"{photo}\" alt=\"Photo de {nom}\">\n        {map_div}\n    </div>\n    \"\"\"\n\nhtml_content += f\"\"\"\n    </div>\n</div>\n<script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n<script>\n    document.addEventListener('DOMContentLoaded', function () {{\n        {map_scripts}\n    }});\n</script>\n</body>\n</html>\n\"\"\"\n\nhtml_base64 = base64.b64encode(html_content.encode(\"utf-8\")).decode(\"utf-8\")\n\nreturn [{\n    \"json\": { \"fileName\": \"restaurants.html\" },\n    \"binary\": {\n        \"data\": {\n            \"data\": html_base64,\n            \"mimeType\": \"text/html\",\n            \"fileName\": \"restaurants.html\"\n        }\n    }\n}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        -360
      ],
      "id": "2b67288e-af65-45ba-a6a9-312fd09d9e28",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "chinoix.html",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -20,
        -260
      ],
      "id": "794ce59a-c921-4438-b79a-9036b35a1110",
      "name": "Read/Write Files from Disk1"
    },
    {
      "parameters": {
        "jsCode": "const regexNomChinois = /\\b(chinois|chinese|orient|asie|asian|dragon|wok|mandarin|shanghai|sichuan|beijing|pekin|dynastie|empereur|imperial|lotus|pho|riz|nouilles|hong\\s*kong|panda|bambou|jade|perle|palais|jardin|fortune)\\b/i;\nconst regexSpecialiteChinoise = /\\b(chinois|chinese|asiatique|asie|orientale|wok|sichuan|cantonais|mandarin|dimsum|nouilles|riz|canard|p√©kinois|fondue\\s*chinoise|soupe\\s*aigre-douce|plat\\s*chinois|b≈ìuf\\s*aux\\s*oignons)\\b/i;\nconst regexAdresseChinoise = /\\b(quartier chinois|chinois|asie|asian|dragon|mandarin|pekin|sichuan)\\b/i;\n\nconst quartierChinoisLatMin = -18.92;\nconst quartierChinoisLatMax = -18.90;\nconst quartierChinoisLonMin = 47.50;\nconst quartierChinoisLonMax = 47.55;\n\nconst outputs = [];\n\nfor (const item of items) {\n  const entree = item.json;\n\n  const nomChinois = regexNomChinois.test(entree.nom);\n  const specialiteChinoise = regexSpecialiteChinoise.test(entree.specialite);\n  const aSite = Boolean(\n    entree.site && \n    entree.site !== \"Aucun site\" && \n    entree.site.toLowerCase().startsWith(\"http\")\n  );\n  const adresseChinoise = regexAdresseChinoise.test(entree.adresse);\n\n  const contactValide = entree.contact && entree.contact.toLowerCase() !== \"aucun\";\n\n  const dansQuartierChinois = entree.latitude >= quartierChinoisLatMin &&\n                             entree.latitude <= quartierChinoisLatMax &&\n                             entree.longitude >= quartierChinoisLonMin &&\n                             entree.longitude <= quartierChinoisLonMax;\n\n  outputs.push({\n    json: {\n      ...entree,\n      nomChinois,\n      specialiteChinoise,\n      aSite,\n      adresseChinoise,\n      contactValide,\n      dansQuartierChinois\n    }\n  });\n}\n\nreturn outputs;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -720,
        -560
      ],
      "id": "c9f45994-f7a3-406d-81c9-c99ff411fbb1",
      "name": "Code5"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from scipy.stats import chi2_contingency\nimport numpy as np\n\noutputs = []\n\n# Poids manuels attribu√©s (√† ajuster selon importance)\npoids_variables = {\n    'nom_chinois': 2.0,\n    'specialite_chinoise': 1.5,\n    'site_web': 1.0,\n    'adresse_chinoise': 1.0,\n    'contact_valide': 0.8,\n    'dans_quartier_chinois': 2.5\n}\n\n# Mapping unique hors boucle\nmapping = {\n    'nom_chinois': 'nomChinois',\n    'specialite_chinoise': 'specialiteChinoise',\n    'site_web': 'aSite',\n    'adresse_chinoise': 'adresseChinoise',\n    'contact_valide': 'contactValide',\n    'dans_quartier_chinois': 'dansQuartierChinois'\n}\n\n# Initialisation des compteurs pour test Khi¬≤\ncompteurs = {key: {'chinois': 0, 'non_chinois': 0} for key in poids_variables.keys()}\n\ntotal = {'chinois': 0, 'non_chinois': 0}\n\n# Supposons que 'est_chinois' est d√©j√† pr√©sent dans tes donn√©es (bool√©en)\nfor item in items:\n    data = item['json']\n    est_chinois = data.get(\"est_chinois\")\n    if est_chinois is None:\n        continue\n    categorie = 'chinois' if est_chinois else 'non_chinois'\n    total[categorie] += 1\n\n    for car, attr in mapping.items():\n        valeur = int(bool(data.get(attr, False)))\n        compteurs[car][categorie] += valeur\n\n# Affichage p-values du test Khi¬≤\nprint(\"R√©sultats des tests Khi¬≤ :\")\nfor carac, vals in compteurs.items():\n    ch = vals['chinois']\n    nch = vals['non_chinois']\n    ch_abs = total['chinois'] - ch\n    nch_abs = total['non_chinois'] - nch\n\n    table = np.array([\n        [ch, nch],\n        [ch_abs, nch_abs]\n    ])\n\n    chi2, p_value, _, _ = chi2_contingency(table)\n    print(f\"Variable {carac} : p-value = {p_value:.4f}\")\n\n# Calcul du score pond√©r√© et filtrage\nfor item in items:\n    data = item['json']\n    score = 0\n    poids_total = 0\n\n    for car, poids in poids_variables.items():\n        attr = mapping[car]\n        valeur = int(bool(data.get(attr, False)))\n        score += poids * valeur\n        poids_total += poids\n\n    score_normalise = score / poids_total if poids_total > 0 else 0\n    est_probablement_chinois = score_normalise > 0.5\n\n    result = dict(data)\n    result[\"score_chinois\"] = round(score_normalise, 3)\n    result[\"est_probablement_chinois\"] = est_probablement_chinois\n\n    if est_probablement_chinois:\n        outputs.append({\"json\": result})\n\nreturn outputs\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -500,
        -460
      ],
      "id": "acbea531-aba9-40ac-8344-2231c0758d05",
      "name": "Code6"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‚ÄòTest workflow‚Äô": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e471216b-611e-4733-8afb-6c9c11d00aef",
  "meta": {
    "instanceId": "4d2fbc727d602cd52ac1840b8e99490e0a05a3a216261b237b33b43e655d7618"
  },
  "id": "ZCQUl70lljHUlYuw",
  "tags": []
}