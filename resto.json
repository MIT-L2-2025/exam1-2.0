{
  "name": "TEST !",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1120,
        1140
      ],
      "id": "5674514c-c036-438a-8fed-49d8474d17a3",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/datasets/1OT57kkZzh97HyxSD/items?format=json&clean=true",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1380,
        1140
      ],
      "id": "1bb590d8-65cb-40a5-9c30-4c76acc877b9",
      "name": "Collecter les données sur Apify"
    },
    {
      "parameters": {
        "url": "=https://maps.googleapis.com/maps/api/place/details/json?place_id={{$json[\"placeId\"]}}&fields=name,photos&key=AIzaSyDEPRHKae22_Hc2HnHqRvKocXKYeQRiXpw",
        "responseFormat": "string",
        "options": {}
      },
      "name": "Colletcter les liens des images des restos",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1640,
        1140
      ],
      "id": "0ba3da50-a552-429c-9205-6a10c6443558"
    },
    {
      "parameters": {
        "jsCode": "const base = \"https://maps.googleapis.com/maps/api/place/photo?maxwidth=800&photoreference=\";\nconst key = \"AIzaSyDEPRHKae22_Hc2HnHqRvKocXKYeQRiXpw\"; // Remplace par ta vraie clé\n\nlet t = 0;\n\n// On suppose que le premier nœud (avec title, address, etc.) est référencé via $items(\"PremierNoeud\")[index]\nreturn items.map((item, index) => {\n  const result = item.json.data?.result || {};\n  const photos = result.photos || [];\n  t += 1;\n\n  const firstNodeData = $items(\"Collecter les données sur Apify\", 0)[index].json;\n\n  const output = {\n    id: t,\n    name: firstNodeData.title || result.name || \"Sans nom\",\n    address: firstNodeData.address || result.formatted_address || \"\",\n    phone: firstNodeData.phone || result.formatted_phone_number || \"\",\n    latitude: firstNodeData.location?.lat || result.geometry?.location?.lat,\n    longitude: firstNodeData.location?.lng || result.geometry?.location?.lng\n  };\n\n  // Ajouter les photos du deuxième nœud\n  photos.forEach((p, index) => {\n    output[`photo${index + 1}`] = `${base}${p.photo_reference}&key=${key}`;\n  });\n\n  return { json: output };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1640,
        1000
      ],
      "id": "eeefc140-072c-4110-97ff-be2dfaddf714",
      "name": "Garder seulement les données nécessaire"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const json = item.json;\n\n  // On extrait toutes les clés qui commencent par \"photo\" et qui ne sont pas vides\n  const photoUrls = Object\n    .keys(json)\n    .filter(key => key.startsWith('photo') && key !== 'photoUrls' && json[key])\n    .map(key => json[key]);\n\n  // On crée un nouveau JSON sans les clés photo1, photo2, etc.\n  const filteredJson = Object\n    .keys(json)\n    .filter(key => !key.startsWith('photo') || key === 'photoUrls')\n    .reduce((obj, key) => {\n      obj[key] = json[key];\n      return obj;\n    }, {});\n\n  // On ajoute photoUrls au JSON filtré\n  filteredJson.photoUrls = photoUrls;\n\n  // On retourne le nouvel item\n  return {\n    json: filteredJson,\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1380,
        1000
      ],
      "id": "b4cb7fa7-5f5d-43e5-8d63-14a051c8fde1",
      "name": "creation de photoUrls"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const json = item.json;\n  const photoUrls = json.photoUrls || [];\n  \n  // Créer un item pour les métadonnées du restaurant\n  const restaurantItem = {\n    json: {\n      type: 'restaurant',\n      id: json.id,\n      name: json.name,\n      address: json.address,\n      phone: json.phone,\n      latitude: json.latitude,\n      longitude: json.longitude\n    }\n  };\n  \n  // Créer un item pour chaque photo\n  const photoItems = photoUrls.map((url, index) => ({\n    json: {\n      type: 'photo',\n      restaurantId: json.id,\n      photoUrl: url,\n      photoIndex: index\n    }\n  }));\n  \n  return [restaurantItem, ...photoItems];\n}).flat();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        1000
      ],
      "id": "d87aae8f-5e52-4e0d-b804-7de459fd731e",
      "name": "Code1",
      "alwaysOutputData": false,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b56d2df5-1923-4e3e-9961-39b499421e27",
              "leftValue": "={{ $json.type }}",
              "rightValue": "restaurant",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -880,
        1000
      ],
      "id": "fa5ddde0-ac63-4ed7-a3d3-e31c20b17927",
      "name": "If"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -840,
        1200
      ],
      "id": "ccfa9db3-c444-4169-a35b-72c49da7a8e7",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me1",
      "typeVersion": 1,
      "position": [
        -100,
        1220
      ],
      "id": "6fdbe7f7-fb50-4141-ab77-8d2400a92cd2"
    },
    {
      "parameters": {
        "url": "={{ $json.photoUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -620,
        1220
      ],
      "id": "88b791d2-cc80-43c6-9033-c106fc91c619",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "content": "## DATA COLLECTION AND CLEANING ",
        "height": 440,
        "width": 780,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1740,
        940
      ],
      "id": "af74562f-c32f-4b60-81ef-83c0a6f122fc",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## PREPARATION FEATURES",
        "height": 600,
        "width": 1000,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -940,
        920
      ],
      "id": "aaf6f42e-8d84-4a74-bf0a-ee5d6ce8787a",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## CREATE DATABASE",
        "height": 220,
        "width": 740,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1740,
        1400
      ],
      "id": "4e1ecde5-1a5f-4213-9d37-935ccbb0999a",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS restaurant (\n  id INTEGER PRIMARY KEY,\n  name TEXT,\n  address TEXT,\n  phone TEXT,\n  latitude DOUBLE PRECISION,\n  longitude DOUBLE PRECISION\n);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1340,
        1440
      ],
      "id": "5a6616b8-4067-4538-bab5-de2b9f5a14fa",
      "name": "RESTAURANT",
      "credentials": {
        "postgres": {
          "id": "aXD5STUDHDadcE4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS photo (\n  id SERIAL PRIMARY KEY,\n  restaurant_id INTEGER NOT NULL,\n  photo_data TEXT NOT NULL, -- base64\n  photo_index INTEGER,\n  FOREIGN KEY (restaurant_id) REFERENCES restaurant(id)\n);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1500,
        1440
      ],
      "id": "ca96e92c-4409-415e-9712-61b29bb29f18",
      "name": "PHOTO",
      "credentials": {
        "postgres": {
          "id": "aXD5STUDHDadcE4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "restaurant",
          "mode": "list",
          "cachedResultName": "restaurant"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.id }}",
            "name": "={{ $json.name }}",
            "address": "={{ $json.address }}",
            "phone": "={{ $json.phone }}",
            "latitude": "={{ $json.latitude }}",
            "longitude": "={{ $json.longitude }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "name",
              "displayName": "name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "address",
              "displayName": "address",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "phone",
              "displayName": "phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "latitude",
              "displayName": "latitude",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "longitude",
              "displayName": "longitude",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "skipOnConflict": true
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -540,
        980
      ],
      "id": "eacbd371-bf37-4c13-8e73-7e1e0b88b9d6",
      "name": "Postgres1",
      "credentials": {
        "postgres": {
          "id": "aXD5STUDHDadcE4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const item = items[0]; // On traite un seul élément\n\nreturn [\n  {\n    json: {\n      restaurantId: item.json.restaurantId,\n      photoIndex: item.json.photoIndex,\n      photoData: item.binary.data.data // Base64\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -440,
        1220
      ],
      "id": "7771d6d3-1867-447e-ad3d-c39cf9047799",
      "name": "Code"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "photo",
          "mode": "list",
          "cachedResultName": "photo"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "restaurant_id": "={{ $json.restaurantId }}",
            "photo_index": "={{ $json.photoIndex }}",
            "photo_data": "={{ $json.photoData }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "restaurant_id",
              "displayName": "restaurant_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "photo_data",
              "displayName": "photo_data",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "photo_index",
              "displayName": "photo_index",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "skipOnConflict": true
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -260,
        1220
      ],
      "id": "e26cce97-d782-4af2-b555-c410afced8a4",
      "name": "Postgres2",
      "credentials": {
        "postgres": {
          "id": "aXD5STUDHDadcE4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "ALTER SEQUENCE public.photo_id_seq RESTART WITH 1;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1680,
        1440
      ],
      "id": "d6794d15-5eb0-4fb9-b40c-db62660958e4",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "aXD5STUDHDadcE4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH duplicates AS (\n    SELECT *,\n           ROW_NUMBER() OVER (PARTITION BY name ORDER BY id) AS rn\n    FROM restaurant\n)\nDELETE FROM restaurant\nWHERE id IN (\n    SELECT id FROM duplicates WHERE rn > 1\n);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1180,
        1440
      ],
      "id": "989b3388-334e-49a5-98bb-c4236279c196",
      "name": "add new column in photo TABLE",
      "credentials": {
        "postgres": {
          "id": "aXD5STUDHDadcE4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "height": 680,
        "width": 920
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        100,
        860
      ],
      "id": "6a42cb5d-71ba-44ce-a15b-70f39e267713",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, name, is_chinois, address, latitude, longitude\nFROM restaurant\nORDER BY name;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        160,
        1140
      ],
      "id": "e797c888-00b5-4d02-99fd-35f14bd99b8d",
      "name": "Postgres3",
      "credentials": {
        "postgres": {
          "id": "aXD5STUDHDadcE4j",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rows = items.map(i => i.json);\n\nconst html = `\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n<meta charset=\"UTF-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Restaurants Chinois - Interface Interactive</title>\n<style>\n  body {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    margin: 20px; background: #f7f9fc; color: #333;\n  }\n  h1 {\n    text-align: center; margin-bottom: 30px;\n    color: #2c3e50;\n  }\n  #search {\n    display: block; margin: 0 auto 20px auto;\n    width: 300px; padding: 10px;\n    border: 1px solid #ccc; border-radius: 5px;\n    font-size: 16px;\n  }\n  table {\n    width: 100%; border-collapse: collapse;\n    box-shadow: 0 0 10px rgb(0 0 0 / 0.1);\n    background: white;\n    border-radius: 8px; overflow: hidden;\n  }\n  th, td {\n    padding: 12px 20px;\n    text-align: left;\n  }\n  thead {\n    background: #34495e; color: white;\n  }\n  tbody tr {\n    border-bottom: 1px solid #ddd;\n    transition: background-color 0.3s ease;\n  }\n  tbody tr:hover {\n    background-color: #f0f4f8;\n  }\n  .chinois {\n    color: #27ae60; font-weight: 700;\n  }\n  .non-chinois {\n    color: #c0392b; font-weight: 700;\n  }\n  @media (max-width: 600px) {\n    table, thead, tbody, th, td, tr {\n      display: block;\n    }\n    thead tr {\n      display: none;\n    }\n    tbody tr {\n      margin-bottom: 15px;\n      background: #fff;\n      box-shadow: 0 0 10px rgb(0 0 0 / 0.05);\n      padding: 15px;\n      border-radius: 8px;\n    }\n    tbody td {\n      padding-left: 50%;\n      position: relative;\n      white-space: pre-wrap;\n      word-wrap: break-word;\n    }\n    tbody td::before {\n      content: attr(data-label);\n      position: absolute;\n      left: 15px;\n      font-weight: 700;\n      color: #555;\n    }\n  }\n</style>\n</head>\n<body>\n\n<h1>Restaurants Chinois</h1>\n\n<input type=\"text\" id=\"search\" placeholder=\"Rechercher un restaurant...\" />\n\n<table>\n  <thead>\n    <tr>\n      <th>ID</th>\n      <th>Nom</th>\n      <th>Adresse</th>\n      <th>Chinois</th>\n    </tr>\n  </thead>\n  <tbody id=\"table-body\">\n    ${rows.map(r => `\n      <tr class=\"${r.is_chinois ? 'chinois' : 'non-chinois'}\">\n        <td data-label=\"ID\">${r.id}</td>\n        <td data-label=\"Nom\">${r.name || '(aucun nom)'}</td>\n        <td data-label=\"Adresse\">${r.adresse || '(aucune adresse)'}</td>\n        <td data-label=\"Chinois\">${r.is_chinois ? '✅ Oui' : '❌ Non'}</td>\n      </tr>\n    `).join('')}\n  </tbody>\n</table>\n\n<script>\n  const searchInput = document.getElementById('search');\n  const tableBody = document.getElementById('table-body');\n\n  searchInput.addEventListener('input', function() {\n    const filter = this.value.toLowerCase();\n    const rows = tableBody.querySelectorAll('tr');\n    rows.forEach(row => {\n      const nom = row.cells[1].textContent.toLowerCase();\n      const adresse = row.cells[2].textContent.toLowerCase();\n      if (nom.includes(filter) || adresse.includes(filter)) {\n        row.style.display = '';\n      } else {\n        row.style.display = 'none';\n      }\n    });\n  });\n</script>\n\n</body>\n</html>\n`;\n\n// Encodage en base64\nconst buffer = Buffer.from(html, 'utf-8');\nconst base64Html = buffer.toString('base64');\n\nreturn [{\n  json: { fileName: \"restaurants_interactifs.html\" },\n  binary: {\n    data: {\n      data: base64Html,\n      mimeType: 'text/html',\n      fileName: 'restaurants_interactifs.html',\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        1140
      ],
      "id": "56ec8e5d-3eac-4a87-8a5a-45536db668f2",
      "name": "Code2"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Collecter les données sur Apify",
            "type": "main",
            "index": 0
          },
          {
            "node": "RESTAURANT",
            "type": "main",
            "index": 0
          },
          {
            "node": "PHOTO",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          },
          {
            "node": "add new column in photo TABLE",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collecter les données sur Apify": {
      "main": [
        [
          {
            "node": "Colletcter les liens des images des restos",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Colletcter les liens des images des restos": {
      "main": [
        [
          {
            "node": "Garder seulement les données nécessaire",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Garder seulement les données nécessaire": {
      "main": [
        [
          {
            "node": "creation de photoUrls",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "creation de photoUrls": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Postgres1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres2": {
      "main": [
        [
          {
            "node": "Replace Me1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres1": {
      "main": [
        []
      ]
    },
    "Postgres3": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "99c2093c-00ce-410f-bbc3-2d5096464aec",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3732ca71b0ba470019e4cef5db3a8b758f0d2801defd2e5a88342e00d57e6ed2"
  },
  "id": "iOnvwQy2pM8H8TYb",
  "tags": []
}