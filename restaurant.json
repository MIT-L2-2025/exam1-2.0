{
  "name": "final2.01",
  "nodes": [
    {
      "parameters": {},
      "id": "1502fb0c-0786-481f-88e2-746d3f9cefce",
      "name": "Start Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -80,
        640
      ]
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/place/textsearch/json?query=restaurant+chinois+à+Antananarivo&key=AIzaSyD26SBDx0y_zVHM30FGrC0BiQm6RrJwpmM",
        "options": {}
      },
      "id": "8a02d3cc-5ba4-4e35-91e0-7061a5a86dfe",
      "name": "Fetch Restaurants",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        100,
        640
      ]
    },
    {
      "parameters": {
        "jsCode": "\nreturn items[0].json.results.map(result => {\n  return {\n    json: {\n      place_id: result.place_id,\n      name: result.name,\n      address: result.formatted_address,\n      lat: result.geometry.location.lat,\n      lng: result.geometry.location.lng,\n      types: result.types\n    }\n  };\n});"
      },
      "id": "5e072bf9-68fd-4faf-ba93-c4e8441c22a5",
      "name": "Extract Place Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        640
      ]
    },
    {
      "parameters": {
        "url": "=https://maps.googleapis.com/maps/api/place/details/json?place_id={{$json[\"place_id\"]}}&key=AIzaSyD26SBDx0y_zVHM30FGrC0BiQm6RrJwpmM",
        "options": {}
      },
      "id": "15ea3d5d-accf-4940-b37b-43a04d6fde4e",
      "name": "Fetch Place Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        500,
        640
      ]
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const result = item.json.result;\n  const photos = result.photos ? result.photos.map(photo => photo.photo_reference) : [];\n  return {\n    json: {\n      place_id: item.json.place_id,\n      nom: result.name || '',\n      adresse: result.formatted_address || '',\n      telephone: result.formatted_phone_number || '',\n      latitude: result.geometry && result.geometry.location ? result.geometry.location.lat : null,\n      longitude: result.geometry && result.geometry.location ? result.geometry.location.lng : null,\n      website: result.website || '',\n      rating: result.rating || '',\n      photo_references: photos,\n      user_rating_total: result.user_ratings_total\n    }\n  };\n});"
      },
      "id": "c832a1a1-a597-4b72-a5bc-0c67b81c47e3",
      "name": "Extract Place Details",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        740,
        640
      ]
    },
    {
      "parameters": {
        "jsCode": "const apiKey = 'AIzaSyD26SBDx0y_zVHM30FGrC0BiQm6RrJwpmM';\nconst maxWidth = 120;\nconst maxHeight = 120;\n\nreturn items.map(item => {\n  const photos = item.json.photo_references || [];\n  const imageUrl = photos.length > 0\n    ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=${maxWidth}&maxheight=${maxHeight}&photoreference=${photos[0]}&key=${apiKey}`\n    : 'https://via.placeholder.com/120';\n  return {\n    json: {\n      ...item.json,\n      image: imageUrl\n    }\n  };\n});"
      },
      "id": "5824b07e-a0fa-47a5-814d-cc1e2d74d9ff",
      "name": "Fetch Google Images",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        120,
        920
      ]
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const lat = item.json.latitude;\n  const lng = item.json.longitude;\n  const mapillaryInteractiveUrl = (lat && lng) ? `https://www.mapillary.com/app/?lat=${lat}&lng=${lng}&z=17&focus=image` : '';\n  return {\n    json: {\n      ...item.json,\n      mapillaryImage: mapillaryInteractiveUrl\n    }\n  };\n});"
      },
      "id": "eb2fe399-4d06-44da-93a0-519ac0b16d28",
      "name": "Fetch Mapillary Images",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        920
      ]
    },
    {
      "parameters": {
        "jsCode": "let sortedRestaurants = items.sort((a, b) => {\n  let probA = parseFloat(a.json.chineseProbability) || 0;\n  let probB = parseFloat(b.json.chineseProbability) || 0;\n  return probB - probA;\n});\n\nlet html = `<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Restaurants Chinois à Antananarivo</title>\n  <style>\n    body { font-family: Arial, sans-serif; background-color: #f8d7da; margin: 0; padding: 0; text-align: center; overflow-x: hidden; }\n    h1 { color: #c82333; font-size: 24px; margin: 20px; }\n    .container-wrapper { display: flex; align-items: center; justify-content: center; width: 100%; overflow: hidden; }\n    .container { display: flex; gap: 20px; padding: 20px; background: #fff; white-space: nowrap; overflow-x: auto; scroll-behavior: smooth; width: 90vw; max-width: 1200px; border: 3px solid #c82333; border-radius: 10px; }\n    .restaurant { flex: 1 1 30%; min-width: 30%; max-width: 30%; border: 1px solid #ddd; padding: 15px; text-align: left; word-wrap: break-word; white-space: normal; overflow: hidden; background-color: #ffe5e5; display: flex; flex-direction: column; justify-content: space-between; border-radius: 8px; }\n    .restaurant img { width: 100%; height: 250px; object-fit: cover; image-rendering: crisp-edges; border-radius: 8px; border: 2px solid #c82333; }\n    .details h3 { margin: 10px 0; color: #c82333; }\n    .details p { margin: 5px 0; word-wrap: break-word; white-space: normal; }\n    .nav-btn { position: absolute; top: 50%; transform: translateY(-50%); background: #c82333; color: #fff; padding: 10px; cursor: pointer; font-size: 20px; border: none; border-radius: 5px; }\n    #prev { left: 10px; }\n    #next { right: 10px; }\n    .google-btn { background-color: blue; color: white; padding: 10px; border-radius: 5px; border: none; cursor: pointer; }\n    .mapillary-btn { background-color: green; color: white; padding: 10px; border-radius: 5px; border: none; cursor: pointer; }\n    .stars { color: #c82333; font-size: 18px; }\n  </style>\n</head>\n<body>\n  <button id=\"prev\" class=\"nav-btn\">&#9664;</button>\n  <button id=\"next\" class=\"nav-btn\">&#9654;</button>\n  <h1>Restaurants Chinois à Antananarivo</h1>\n  <div class=\"container-wrapper\">\n    <div class=\"container\">`;\n\nsortedRestaurants.forEach(item => {\n  const resto = item.json;\n  const image = resto.image || 'https://via.placeholder.com/800x500';\n  const mapillaryLink = resto.mapillaryImage || '';\n\n  // Generate star rating with red color\n  let rating = parseFloat(resto.rating) || 0;\n  let stars = '<span class=\"stars\">' + '★'.repeat(Math.round(rating)) + '☆'.repeat(5 - Math.round(rating)) + '</span>';\n  let userRatingCount = resto.user_rating_total || '0';\n\n  html += `\n    <div class=\"restaurant\">\n      <img src=\"${image}\" alt=\"${resto.nom}\">\n      <div class=\"details\">\n        <h3><a href=\"${resto.website || '#'}\" target=\"_blank\">${resto.nom}</a></h3>\n        <p><strong>Adresse:</strong> ${resto.adresse.replace(/\\n/g, '<br>')}</p>\n        <p><strong>Téléphone:</strong> ${resto.telephone || 'N/A'}</p>\n        <p><strong>Note:</strong> ${rating} ${stars} (${userRatingCount} avis)</p>\n        <p><strong>Coordonnées:</strong> ${resto.latitude}, ${resto.longitude}</p>\n        <p><strong>Probabilité Chinoise:</strong> ${resto.chineseProbability}</p>\n        <a href=\"https://www.google.com/maps?q=${resto.latitude},${resto.longitude}\" target=\"_blank\">\n          <button class=\"google-btn\">Voir sur Google Maps</button>\n        </a>\n        ${mapillaryLink ? `<a href=\"${mapillaryLink}\" target=\"_blank\"><button class=\"mapillary-btn\">Voir 3D sur Mapillary</button></a>` : ''}\n      </div>\n    </div>`;\n});\n\nhtml += `</div>\n  </div>\n<script>\n  const container = document.querySelector('.container');\n\n  document.getElementById('prev').addEventListener('click', () => {\n    container.scrollBy({ left: -container.clientWidth, behavior: 'smooth' });\n  });\n\n  document.getElementById('next').addEventListener('click', () => {\n    container.scrollBy({ left: container.clientWidth, behavior: 'smooth' });\n  });\n\n  function updateLayout() {\n    const containerWidth = container.clientWidth;\n    const restaurantWidth = containerWidth / 3; \n    document.querySelectorAll('.restaurant').forEach(restaurant => {\n      restaurant.style.width = restaurantWidth + 'px';\n    });\n  }\n\n  window.addEventListener('resize', updateLayout);\n  updateLayout();\n</script>\n</body>\n</html>`;\n\nconst buffer = Buffer.from(html, 'utf8');\n\nreturn [{\n  binary: {\n    data: {\n      data: buffer.toString('base64'),\n      mimeType: 'text/html',\n      fileName: 'restaurants_chinois_antananarivo.html'\n    }\n  }\n}];\n"
      },
      "id": "6cd1dfaa-8988-4372-b276-eaa0fa12e1c4",
      "name": "Generate HTML Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        920
      ]
    },
    {
      "parameters": {
        "jsCode": "const chineseKeywords = /\\b(dragon|chinese|中国|panda|wok|peking|mandarin|oriental|hong|fu|tang|mei|shanghai|beijing|sichuan|kong|xin|xiang|wei|chine|qing|yuan)\\b/gi;\nconst hanziRegex = /[\\u4E00-\\u9FFF]/g; // Detect Hanzi (Chinese characters)\n\n// Reference locations (latitude, longitude)\nconst referencePoints = [\n  { name: \"Behoririka\", lat: -18.88, lng: 47.51 },\n  { name: \"Ampefiloha\", lat: -18.90, lng: 47.52 },\n  { name: \"Analakely\", lat: -18.91, lng: 47.52 },\n  { name: \"Andravoahangy\", lat: -18.87, lng: 47.52 },\n  { name: \"Ankorondrano\", lat: -18.86, lng: 47.54 },\n  { name: \"Ivato\", lat: -18.80, lng: 47.48 },\n  { name: \"Ambohimanarina\", lat: -18.85, lng: 47.53 }\n];\n\n// Haversine formula to calculate distance (in km) between two lat/lng points\nfunction haversineDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Earth's radius in km\n  const dLat = (lat2 - lat1) * Math.PI / 180;\n  const dLon = (lon2 - lon1) * Math.PI / 180;\n  const a = Math.sin(dLat / 2) ** 2 +\n            Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n            Math.sin(dLon / 2) ** 2;\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n}\n\nreturn items.map(item => {\n  // Process restaurant name for Chinese indicators\n  const name = item.json.nom || \"\";\n  const words = name.split(/\\s+/);\n  const numWords = words.length || 1;\n  \n  // Match for Chinese-sounding words and Hanzi characters\n  const keywordMatches = name.match(chineseKeywords) || [];\n  const hanziMatches = name.match(hanziRegex) || [];\n\n  // **Improved Hanzi Handling**\n  const hanziRatio = hanziMatches.length / name.length;\n  const wordRatio = keywordMatches.length / name.length;\n  let obs1, expected1;\n\n  if (hanziRatio > 0.7 || wordRatio > 0.6) {\n    obs1 = 1.0; // If most of the name is Hanzi, assign highest probability\n    expected1 = 0.99;\n  } else if (hanziRatio > 0.05 && wordRatio > 0.05 && \n            hanziRatio < 0.4 && wordRatio < 0.6){\n    obs1 = 0.8;\n    expected1 = 0.77;\n  } else if (hanziRatio >= 0.5 ){\n    obs1 = 0.7;\n    expected1 = 0.6;\n  } else if (wordRatio > 0.2){\n    obs1 = 0.5;\n    expected1 = 0.43;\n  }else if (hanziRatio > 0.01){\n    obs1 = 0.4;\n  expected1 = 0.5;\n  }else {\n    obs1 = (keywordMatches.length + hanziMatches.length) / numWords;\n    expected1 = 0.9;\n  }\n\n  // **Location-based probability**\n  let obs2 = 0;\n  const lat = item.json.latitude;\n  const lng = item.json.longitude;\n  if (lat && lng) {\n    for (const ref of referencePoints) {\n      const distance = haversineDistance(lat, lng, ref.lat, ref.lng);\n      if (distance <= 1) {\n        obs2 = 1; // Strong match if within 1km of known Chinese hotspot\n        break;\n      } else if (distance <= 1.5) {\n        obs2 = 0.5;\n      } else if (distance <= 2) {\n        obs2 = 0.37;\n      }\n    }\n  }\n  const expected2 = 0.85; // Expected probability near Chinese areas\n\n  // **Adjusted Chi-Square Computation**\n  const chi1 = Math.pow(obs1 - expected1, 2) / expected1;\n  const chi2 = Math.pow(obs2 - expected2, 2) / expected2;\n  const chiTotal = chi1 + chi2;\n\n  // Convert chi-square into probability\n  const probability = (Math.exp(-chiTotal / 2) * 100).toFixed(2) + '%';\n\n  item.json.chineseProbability = probability;\n  return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        600,
        920
      ],
      "id": "37956a30-9a32-435e-881a-67807b73ca96",
      "name": "Chi-Sqaured"
    }
  ],
  "pinData": {},
  "connections": {
    "Start Trigger": {
      "main": [
        [
          {
            "node": "Fetch Restaurants",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Restaurants": {
      "main": [
        [
          {
            "node": "Extract Place Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Place Data": {
      "main": [
        [
          {
            "node": "Fetch Place Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Place Details": {
      "main": [
        [
          {
            "node": "Extract Place Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Place Details": {
      "main": [
        [
          {
            "node": "Fetch Google Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Google Images": {
      "main": [
        [
          {
            "node": "Fetch Mapillary Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Mapillary Images": {
      "main": [
        [
          {
            "node": "Chi-Sqaured",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chi-Sqaured": {
      "main": [
        [
          {
            "node": "Generate HTML Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate HTML Output": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b0caafc5-6100-4e1b-a583-34a0a6ad1b26",
  "meta": {
    "instanceId": "2532da0a96fddd10447229ca27da7f18bf15ab73eaa09ab19aff0fdfd393b8c7"
  },
  "id": "x6Bk496EwoIx8JuB",
  "tags": []
}