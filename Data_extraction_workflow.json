{
  "name": "My workflow 4",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -180,
        260
      ],
      "id": "5e039154-b6e2-4a45-95a3-c2898820eebe",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/place/details/json",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "place_id",
              "value": "={{ $json.place_id }}"
            },
            {
              "name": "fields",
              "value": "formatted_phone_number,international_phone_number,reviews(author_name,text,rating)"
            },
            {
              "name": "key",
              "value": "AIzaSyD26SBDx0y_zVHM30FGrC0BiQm6RrJwpmM"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        960,
        -120
      ],
      "id": "a6289332-3e11-4c74-bff5-876db845fc46",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/place/textsearch/json",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "chinese restaurant Antananarivo"
            },
            {
              "name": "key",
              "value": "AIzaSyD26SBDx0y_zVHM30FGrC0BiQm6RrJwpmM"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -20,
        260
      ],
      "id": "637205c1-35ae-41f9-8703-956359ca5320",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {
          "clashHandling": {
            "values": {
              "resolveClash": "addSuffix"
            }
          },
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1100,
        280
      ],
      "id": "93342f86-fd2b-4d64-a5fe-b5a296b6e5ab",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2f33bc12-d94c-41c2-b9c5-cce9c498f398",
              "name": "formated_phone_number",
              "value": "={{ $json.formated_phone_number_1 }}",
              "type": "string"
            },
            {
              "id": "1c9aaba6-0ce0-4c0d-9d9c-a72feef51e57",
              "name": "international_phone_number",
              "value": "={{ $json.international_phone_number_1 }}",
              "type": "string"
            },
            {
              "id": "5eb631b9-cd3f-4fa5-bdce-478963856a83",
              "name": "all_text",
              "value": "={{ $json.all_text_1 }}",
              "type": "string"
            },
            {
              "id": "da098746-06df-4b9d-8b4a-c76620fdbe89",
              "name": "all_rating",
              "value": "={{ $json.all_rating_1 }}",
              "type": "string"
            },
            {
              "id": "39d23878-8978-4159-8ecc-63ec5732f963",
              "name": "name",
              "value": "={{ $json.name_2 }}",
              "type": "string"
            },
            {
              "id": "9bceaa1e-9c9f-4b1f-915e-67813d562a88",
              "name": "latitude",
              "value": "={{ $json.latitude_2 }}",
              "type": "number"
            },
            {
              "id": "838a74a7-f047-438a-8d24-6fb6f7aedfec",
              "name": "longitude",
              "value": "={{ $json.longitude_2 }}",
              "type": "number"
            },
            {
              "id": "abe75f0c-bb4d-40af-94d0-50fa90fe2703",
              "name": "vicinity",
              "value": "={{ $json.vicinity_2 }}",
              "type": "string"
            },
            {
              "id": "af8c3284-7c5a-4f63-9dc0-bd84ed588760",
              "name": "photo",
              "value": "={{ $json.photo_2 }}",
              "type": "string"
            },
            {
              "id": "93146f75-5e64-47a6-80d1-536b96b7a806",
              "name": "place_id",
              "value": "={{ $json.place_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        940,
        580
      ],
      "id": "86b7418c-3aea-47e2-8a34-ee9a76b4f877",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const restaurants = $input.all().map(item => item.json);\n\nlet htmlContent = `\n  <!DOCTYPE html>\n  <html lang=\"fr\">\n  <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Liste des Restaurants</title>\n      <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap\" rel=\"stylesheet\">\n      <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\">\n      <style>\n          body {\n              font-family: 'Poppins', sans-serif;\n              margin: 0;\n              background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n              color: #333;\n          }\n          .container {\n              max-width: 900px;\n              margin: 40px auto;\n              padding: 0 20px;\n          }\n          h1 {\n              text-align: center;\n              color: #2c3e50;\n              font-size: 2.5em;\n              margin-bottom: 40px;\n              text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);\n          }\n          .restaurant {\n              background: #fff;\n              border-radius: 15px;\n              padding: 20px;\n              margin-bottom: 30px;\n              box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\n              transition: transform 0.3s ease, box-shadow 0.3s ease;\n              animation: fadeIn 0.5s ease-in-out;\n          }\n          .restaurant:hover {\n              transform: translateY(-5px);\n              box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);\n          }\n          .restaurant h2 {\n              color: #e74c3c;\n              font-size: 1.8em;\n              margin: 0 0 10px;\n          }\n          .restaurant p {\n              margin: 8px 0;\n              font-size: 1em;\n              color: #555;\n              display: flex;\n              align-items: center;\n          }\n          .restaurant p i {\n              margin-right: 10px;\n              color: #3498db;\n              font-size: 1.2em;\n          }\n          .restaurant img {\n              max-width: 100%;\n              height: auto;\n              border-radius: 10px;\n              margin: 15px 0;\n              box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n          }\n          .website-link, .route-button {\n              display: inline-block;\n              margin: 10px 10px 10px 0;\n              padding: 10px 20px;\n              color: #fff;\n              text-decoration: none;\n              border-radius: 5px;\n              transition: background 0.3s ease;\n          }\n          .website-link {\n              background: #3498db;\n          }\n          .website-link:hover {\n              background: #2980b9;\n          }\n          .route-button {\n              background: #2ecc71;\n              border: none;\n              cursor: pointer;\n              font-size: 1em;\n          }\n          .route-button:hover {\n              background: #27ae60;\n          }\n          .map {\n              height: 300px;\n              width: 100%;\n              margin-top: 20px;\n              border-radius: 10px;\n              overflow: hidden;\n              box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n          }\n          @keyframes fadeIn {\n              from { opacity: 0; transform: translateY(20px); }\n              to { opacity: 1; transform: translateY(0); }\n          }\n          @media (max-width: 600px) {\n              .restaurant h2 { font-size: 1.5em; }\n              .restaurant p { font-size: 0.9em; }\n              .container { margin: 20px; }\n              .website-link, .route-button { font-size: 0.9em; padding: 8px 15px; }\n          }\n      </style>\n      <!-- Inclure l'API Google Maps -->\n      <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyD26SBDx0y_zVHM30FGrC0BiQm6RrJwpmM&callback=initMaps\" defer></script>\n  </head>\n  <body>\n      <div class=\"container\">\n          <h1>Liste des Restaurants Chinois à Antananarivo</h1>\n`;\n\nrestaurants.forEach((restaurant, index) => {\n  htmlContent += `\n    <div class=\"restaurant\">\n        <h2>${restaurant.name || 'Nom inconnu'}</h2>\n        <p><i class=\"fas fa-map-marker-alt\"></i><strong>Adresse :</strong> ${restaurant.adresse || 'Non disponible'}</p>\n        <p><i class=\"fas fa-phone\"></i><strong>Téléphone :</strong> ${restaurant.phone_number || 'Non disponible'}</p>\n        <p><i class=\"fas fa-globe\"></i><strong>Téléphone international :</strong> ${restaurant.international_phone_number || 'Non disponible'}</p>\n        ${\n          restaurant.website\n            ? `<a href=\"${restaurant.website}\" class=\"website-link\" target=\"_blank\"><i class=\"fas fa-link\"></i> Visiter le site web</a>`\n            : '<p><i class=\"fas fa-link\"></i><strong>Site web :</strong> Non disponible</p>'\n        }\n        <p><i class=\"fas fa-map-pin\"></i><strong>Coordonnées :</strong> Latitude ${restaurant.latitude || 'N/A'}, Longitude ${restaurant.longitude || 'N/A'}</p>\n        <img src=\"${restaurant.photo && restaurant.photo !== 'Pas de photo disponible' ? restaurant.photo : 'https://via.placeholder.com/400'}\" alt=\"Photo de ${restaurant.name || 'restaurant'}\">\n        <!-- Bouton pour afficher l'itinéraire -->\n        <button class=\"route-button\" onclick=\"showRoute(${index})\"><i class=\"fas fa-route\"></i> Voir l'itinéraire</button>\n        <!-- Conteneur pour la carte -->\n        <div id=\"map-${index}\" class=\"map\"></div>\n    </div>\n  `;\n});\n\nhtmlContent += `\n      </div>\n      <script>\n          // Tableau pour stocker les données des cartes\n          const mapData = ${JSON.stringify(\n            restaurants.map(restaurant => ({\n              lat: parseFloat(restaurant.latitude) || 0,\n              lng: parseFloat(restaurant.longitude) || 0,\n              name: restaurant.name || 'Restaurant'\n            }))\n          )};\n\n          // Tableau pour stocker les instances de carte et de rendu d'itinéraire\n          const maps = [];\n          const directionsRenderers = [];\n\n          // Fonction pour initialiser les cartes\n          function initMaps() {\n              mapData.forEach((data, index) => {\n                  // Vérifier si les coordonnées sont valides\n                  if (data.lat !== 0 && data.lng !== 0) {\n                      const map = new google.maps.Map(document.getElementById('map-' + index), {\n                          center: { lat: data.lat, lng: data.lng },\n                          zoom: 15,\n                          mapTypeId: 'roadmap'\n                      });\n                      // Ajouter un marqueur\n                      new google.maps.Marker({\n                          position: { lat: data.lat, lng: data.lng },\n                          map: map,\n                          title: data.name\n                      });\n                      // Stocker la carte et un renderer pour les itinéraires\n                      maps[index] = map;\n                      directionsRenderers[index] = new google.maps.DirectionsRenderer({\n                          map: map,\n                          suppressMarkers: false // Garder les marqueurs pour l'origine et la destination\n                      });\n                  } else {\n                      // Cacher le conteneur de la carte si les coordonnées ne sont pas valides\n                      document.getElementById('map-' + index).style.display = 'none';\n                      document.querySelector('#map-' + index + ' + .route-button').style.display = 'none';\n                  }\n              });\n          }\n\n          // Fonction pour afficher l'itinéraire\n          function showRoute(index) {\n              if (!maps[index]) return;\n              \n              // Vérifier si la géolocalisation est disponible\n              if (navigator.geolocation) {\n                  navigator.geolocation.getCurrentPosition(\n                      (position) => {\n                          const userLocation = {\n                              lat: position.coords.latitude,\n                              lng: position.coords.longitude\n                          };\n                          const destination = {\n                              lat: mapData[index].lat,\n                              lng: mapData[index].lng\n                          };\n\n                          // Initialiser le service de calcul d'itinéraire\n                          const directionsService = new google.maps.DirectionsService();\n                          directionsService.route(\n                              {\n                                  origin: userLocation,\n                                  destination: destination,\n                                  travelMode: google.maps.TravelMode.DRIVING // Mode de transport (peut être modifié)\n                              },\n                              (result, status) => {\n                                  if (status === google.maps.DirectionsStatus.OK) {\n                                      // Afficher l'itinéraire sur la carte\n                                      directionsRenderers[index].setDirections(result);\n                                  } else {\n                                      alert('Impossible de calculer l\\\\'itinéraire : ' + status);\n                                  }\n                              }\n                          );\n                      },\n                      (error) => {\n                          alert('Erreur de géolocalisation : ' + error.message);\n                      }\n                  );\n              } else {\n                  alert('La géolocalisation n\\\\'est pas prise en charge par votre navigateur.');\n              }\n          }\n      </script>\n  </body>\n  </html>\n`;\n\nreturn [{\n  json: { fileName: 'restaurants.html' },\n  binary: {\n    data: {\n      data: Buffer.from(htmlContent).toString('base64'),\n      mimeType: 'text/html',\n      fileName: 'restaurants.html'\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        160
      ],
      "id": "a89db185-7610-421a-a525-ef8182df78c4",
      "name": "Code2"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=restaurant.json",
        "options": {
          "append": false
        }
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1360,
        580
      ],
      "id": "2e823253-e679-4eb4-b213-38acf5c149dc",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "jsCode": "// Combiner tous les restaurants de tous les items\nconst allRestaurants = items\n  .flatMap(item => item.json.results || [])\n  .map(restaurant => ({\n    json: {\n      name: restaurant.name || \"Nom inconnu\",\n      latitude: restaurant.geometry?.location?.lat || 0,\n      longitude: restaurant.geometry?.location?.lng || 0,\n      vicinity: restaurant.formatted_address || \"Adresse inconnue\",\n      photo: restaurant.photos?.[0]?.photo_reference \n        ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=${restaurant.photos[0].photo_reference}&key=VOTRE_CLE_API`\n        : \"Pas de photo disponible\",\n      place_id: restaurant.place_id || \"\", // Conserver le place_id\n    }\n  }));\n\nreturn allRestaurants;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        320
      ],
      "id": "5f88fd7c-8c0a-4bd3-ac43-b11afccab0f2",
      "name": "Code"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        40,
        -160
      ],
      "id": "3fa78b3b-993f-4732-a252-d0f9765bfe84",
      "name": "Wait",
      "webhookId": "581027fc-64cb-4efa-85bb-7fbe7a45381a"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/place/textsearch/json",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "pagetoken",
              "value": "={{ $json.next_page_token }}"
            },
            {
              "name": "key",
              "value": "AIzaSyD26SBDx0y_zVHM30FGrC0BiQm6RrJwpmM"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        200,
        -200
      ],
      "id": "d90ac89a-5dbc-4c57-adac-622f9412345c",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Combiner tous les restaurants de tous les items\nconst allRestaurants = items\n  .flatMap(item => item.json.results || [])\n  .map(restaurant => ({\n    json: {\n      name: restaurant.name || \"Nom inconnu\",\n      latitude: restaurant.geometry?.location?.lat || 0,\n      longitude: restaurant.geometry?.location?.lng || 0,\n      vicinity: restaurant.formatted_address || \"Adresse inconnue\",\n      photo: restaurant.photos?.[0]?.photo_reference \n        ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=${restaurant.photos[0].photo_reference}&key=VOTRE_CLE_API`\n        : \"Pas de photo disponible\",\n      place_id: restaurant.place_id || \"\", // Conserver le place_id\n    }\n  }));\n\nreturn allRestaurants;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        80
      ],
      "id": "8809ba1a-f8ad-4a04-a2f3-f8f775bc7f31",
      "name": "Code3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        500,
        400
      ],
      "id": "235c159a-2995-4c3a-935c-376f381d80ae",
      "name": "Merge1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f7886e57-8ccc-4881-947a-c9a973e05920",
              "leftValue": "={{ $json.next_page_token }}",
              "rightValue": "=",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -120,
        -20
      ],
      "id": "204c3a11-3543-42c9-add2-0ed7bfee2291",
      "name": "Next page "
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7d05774c-c2b4-4d75-b24f-790b9b0d0c39",
              "leftValue": "={{ $json.next_page_token }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        380,
        -200
      ],
      "id": "e8c2293f-5692-4773-8ec2-4fa8d4d87fc3",
      "name": "If"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/place/textsearch/json",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "pagetoken",
              "value": "={{ $json.next_page_token }}"
            },
            {
              "name": "key",
              "value": "AIzaSyD26SBDx0y_zVHM30FGrC0BiQm6RrJwpmM"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        320,
        40
      ],
      "id": "c8eaba67-e528-4e6f-acb8-9ce181830ba2",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "jsCode": "// Combiner tous les restaurants de tous les items\nconst allRestaurants = items\n  .flatMap(item => item.json.results || [])\n  .map(restaurant => ({\n    json: {\n      name: restaurant.name || \"Nom inconnu\",\n      latitude: restaurant.geometry?.location?.lat || 0,\n      longitude: restaurant.geometry?.location?.lng || 0,\n      vicinity: restaurant.formatted_address || \"Adresse inconnue\",\n      photo: restaurant.photos?.[0]?.photo_reference \n        ? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=${restaurant.photos[0].photo_reference}&key=VOTRE_CLE_API`\n        : \"Pas de photo disponible\",\n      place_id: restaurant.place_id || \"\", // Conserver le place_id\n    }\n  }));\n\nreturn allRestaurants;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        180
      ],
      "id": "edd3aade-e02f-400b-96b0-c8044f1c6138",
      "name": "Code4"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        420,
        -80
      ],
      "id": "6d94ac8c-5db0-4bea-9069-e4c96c411c18",
      "name": "Wait1",
      "webhookId": "581027fc-64cb-4efa-85bb-7fbe7a45381a"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        720,
        160
      ],
      "id": "7ec2220b-79b3-406a-84ec-f971062f1c6a",
      "name": "Merge2"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const result = item.json.result || {};\n  const formated_phone_number = result.formatted_phone_number || 'Non disponible';\n  const international_phone_number = result.international_phone_number || \"Non disponible\";\n  const reviews = result.reviews || [];\n  \n  // Regrouper les auteurs\n  const all_authors = reviews\n    .map(review => review.author_name)\n    .filter(Boolean)\n    .join(', ');\n  \n  // Regrouper les textes des commentaires\n  const all_text = reviews\n    .map(review => review.text)\n    .filter(Boolean)\n    .join('. ');\n  \n  const all_rating = reviews\n    .map(review => review.rating)\n    .filter(Boolean)\n    .join('. ');\n  \n  return {\n    json: {\n      formated_phone_number,\n  international_phone_number,\n      all_authors,\n      all_text,\n      all_rating\n    }\n  };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        -80
      ],
      "id": "59628ba0-11a3-437a-8d0e-c76a437a97b6",
      "name": "Code5"
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1120,
        580
      ],
      "id": "a9f1cc66-a4b6-4f2c-a66d-9049094358bf",
      "name": "Convert to File"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          },
          {
            "node": "Next page ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        []
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Next page ": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b57edb3e-0d9a-49ab-8ee4-e9370359feaa",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c49c0f976de77a9ed888a5ba0d2d58e9fd42d06b0d1226a3b2a7a9e238e05795"
  },
  "id": "yH9qoQhKmkPtiREG",
  "tags": []
}
